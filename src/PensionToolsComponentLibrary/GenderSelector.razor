@using Domain.Enums
@using PensionToolsComponentLibrary.Resources

@inject IStringLocalizer<PensionComponents> Localizer

<MudSelect T="GenderViewModel"
           Label="@Label"
           @bind-Value="selectedGenderModel"
           Required="true">

    @foreach (var g in genderModels)
    {
        <MudSelectItem T="GenderViewModel" Value="g">@g.Name</MudSelectItem>
    }
</MudSelect>

@code {
    public record GenderViewModel
    {
        public Gender Value { get; set; }

        public string Name { get; set;}
    }

    [Parameter] public string Label { get; set; }
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public bool DisplayInGrid { get; set; }
    [Parameter] public Gender? SelectedGender { get; set; }

    [Parameter]
    public EventCallback<GenderViewModel> OnSelected { get; set; }

    private readonly List<GenderViewModel> genderModels = new();

    private GenderViewModel? selectedGenderModel;

    protected override void OnInitialized()
    {
        genderModels.Add(new GenderViewModel { Name = Localizer["gender.male"], Value = Gender.Male });
        genderModels.Add(new GenderViewModel { Name = Localizer["gender.female"], Value = Gender.Female });
    }

    private async Task HandleChange(GenderViewModel value)
    {
        SelectedGender = value.Value;
        await OnSelected.InvokeAsync(value);
    }

    private GenderViewModel? From(Gender? gender)
    {
        return gender is null ? null : genderModels.FirstOrDefault(item => item.Value == gender.Value);
    }

    private Func<GenderViewModel?,bool> CheckSelection()
    {
        return vm => vm is not null;
    }
}