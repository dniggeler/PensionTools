@page "/TaxComparers"

@using Microsoft.Extensions.Logging
@using PensionCoach.Tools.CommonTypes
@using Microsoft.AspNetCore.Components
@using PensionCoach.Tools.TaxComparison

@inject IStringLocalizer<Resource> localizer
@inject ILogger<WealthPlanning> Logger
@inject IPersonService personService
@inject ITaxCapitalBenefitsComparisonService taxComparisonService
@inject IExportService ExportService

<RadzenTemplateForm TItem="CapitalBenefitTaxComparerRequest" Data=@taxRequest Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
    <RadzenContent Container="main">
        <ChildContent>
            <RadzenHeading Size="H1" Text="Gemeindevergleich Kapitalbezugssteuer"></RadzenHeading>
            <RadzenSteps NextText="Nächster" PreviousText="Vorheriger">
                <Steps>
                    <RadzenStepsItem Text="Personen" Selected="true">
                        <FormStep Title="Auswahl" HelpText="Vergleiche die Steuer eines Kapitalbezug zwischen allen Schweizer Gemeinden.">
                            <div class="row">
                                <PersonSelector Persons="persons" OnSelect="@HandleSelectPerson"/>
                            </div>
                        </FormStep>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Steuerperson ändern" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep Title="Person"
                                      HelpText="Steuerlich relevante Angaben zur Person sind der Zivilstand,
die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter,
welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.
Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.">
                                <ChildContent>
                                    <div class="row">
                                        <RadzenFieldset Text="Person">
                                            <div class="row">
                                                <div class="col-md-3"><RadzenLabel Text="Name" /></div>
                                                <div class="col-md-9"><RadzenTextBox @bind-Value="taxRequest.Name" Name="simulationName" ReadOnly="true" /></div>

                                                <div class="col-md-3"><RadzenLabel Text="Zivilstand" /></div>
                                                <div class="col-md-9">
                                                    <CivilStatusSelector
                                                        SelectedCivilStatus="@taxRequest.CivilStatus"
                                                        OnSelected="@(args => taxRequest.CivilStatus = args)"/>
                                                </div>

                                                <div class="col-md-3"><RadzenLabel Text="Konfession" /></div>
                                                <div class="col-md-9">
                                                    <ReligiousGroupSelector
                                                        SelectedReligiousGroupType="@taxRequest.ReligiousGroup"
                                                        OnSelected="@(args => taxRequest.ReligiousGroup = args ?? ReligiousGroupType.Other)" />
                                                </div>
                                                @if (taxRequest.CivilStatus == CivilStatus.Married)
                                                {
                                                    <div class="col-md-3"><RadzenLabel Text="Konfession Partner" /></div>
                                                    <div class="col-md-9">
                                                        <ReligiousGroupSelector
                                                            SelectedReligiousGroupType="@taxRequest.PartnerReligiousGroup"
                                                            OnSelected="@(args => taxRequest.PartnerReligiousGroup = args)" />
                                                    </div>
                                                }
                                            </div>

                                        </RadzenFieldset>
                                    </div>
                                </ChildContent>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>

                    <RadzenStepsItem Text="Berechnung" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep Title="Simulation" HelpText="Das Ergebnis einer Simulation lässt sich von weiteren Parametern steuern. Welcher Betrag soll bezogen werden und mit welchen Gemeinden soll verglichen werden?">
                                <div class="col-md-3"><RadzenLabel Text="Kapitalbetrag" /></div>
                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="n0" @bind-Value="taxRequest.TaxableBenefits" Step="10000.0" /></div>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                </Steps>
            </RadzenSteps>
            
            <div class="row">
                <div class="col-md-12 text-right mt-1">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Berechne" Disabled="@(selectedPerson == null)"></RadzenButton>
                </div>
            </div>

        </ChildContent>
    </RadzenContent>
</RadzenTemplateForm>

@if (isComputing)
{
    <ComputedProgressBar Value="@progressBarValue" Title="Gemeinde"/>
}


<RadzenPanel AllowCollapse="true">
    <div class="container">
        <div class="row">
            <div class="col-lg-4">
                <RadzenCard Visible="@(selectedPerson is not null)">
                    <RadzenText TextStyle="TextStyle.H6">
                        <strong>Meine Wohngemeinde</strong>
                    </RadzenText>
                    <div class="row">
                        <div class="col-md-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Gemeinde</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(selectedPerson.MunicipalityName)</b>
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Kanton</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(selectedPerson.Canton)</b>
                            </RadzenText>
                        </div>
                        <div class="col-md-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Steuertotal</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:F0}", GetMyMunicipalityTaxAmount())</b>
                            </RadzenText>
                        </div>
                    </div>
                </RadzenCard>
            </div>
            <div class="col-lg-4">
                <RadzenCard Visible="@(minimalTaxResult is not null)">
                    <RadzenText TextStyle="TextStyle.H6">
                        <strong>Minimale Belastung</strong>
                    </RadzenText>
                    <div class="row">
                        <div class="col-md-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Gemeinde</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(minimalTaxResult.MunicipalityName)</b>
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Kanton</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(minimalTaxResult.Canton)</b>
                            </RadzenText>
                        </div>
                        <div class="col-md-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Steuertotal</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:F0}", minimalTaxResult.TotalTaxAmount)</b>
                            </RadzenText>
                        </div>
                    </div>
                </RadzenCard>
            </div>
            <div class="col-lg-4">
                <RadzenCard Visible="@(maximalTaxResult is not null)">
                    <RadzenText TextStyle="TextStyle.H6">
                        <strong>Maximale Belastung</strong>
                    </RadzenText>
                    <div class="row">
                        <div class="col-md-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Gemeinde</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(maximalTaxResult.MunicipalityName)</b>
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Kanton</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@(maximalTaxResult.Canton)</b>
                            </RadzenText>
                        </div>
                        <div class="col-md-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Steuertotal</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:F0}", maximalTaxResult.TotalTaxAmount)</b>
                            </RadzenText>
                        </div>
                    </div>
                </RadzenCard>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <RadzenButton Text="Export XLS" Icon="grid_on" Click="@(_ => Export("excel"))" Class="mb-4 mr-2"/>
            </div>
            <div class="col-lg-12">
                <RadzenDataGrid @ref="taxResultGrid" AllowFiltering="true" AllowColumnResize="false" AllowPaging="true" AllowSorting="true"
                                FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And"
                                Data="@(Data())" TItem="TaxComparerResultReportModel">
                    <Columns>
                        <RadzenDataGridColumn TItem="TaxComparerResultReportModel" Property="MunicipalityName" Filterable="true" Title="Name" TextAlign="TextAlign.Left"/>
                        <RadzenDataGridColumn TItem="TaxComparerResultReportModel" Property="Canton" Filterable="true" Title="Kanton" TextAlign="TextAlign.Center"/>
                        <RadzenDataGridColumn TItem="TaxComparerResultReportModel" Property="TotalTaxAmount" Filterable="false" Title="Total" TextAlign="TextAlign.Right">
                            <Template Context="resultItem">
                                @String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:F0}", resultItem.TotalTaxAmount)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TaxComparerResultReportModel" Property="MunicipalityTaxAmount" Filterable="false" Title="Gemeindesteuer" TextAlign="TextAlign.Right">
                            <Template Context="resultItem">
                                @String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:F0}", resultItem.MunicipalityTaxAmount)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TaxComparerResultReportModel" Property="CantonTaxAmount" Filterable="false" Title="Staatssteuer" TextAlign="TextAlign.Right">
                            <Template Context="resultItem">
                                @String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:F0}", resultItem.CantonTaxAmount)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TaxComparerResultReportModel" Property="FederalTaxAmount" Filterable="false" Title="Bundessteuer" TextAlign="TextAlign.Right">
                            <Template Context="resultItem">
                                @String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:F0}", resultItem.FederalTaxAmount)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TaxComparerResultReportModel" Property="ChurchTaxAmount" Filterable="false" Title="Kirchensteuer" TextAlign="TextAlign.Right">
                            <Template Context="resultItem">
                                @String.Format(new System.Globalization.CultureInfo("de-CH"), "{0:F0}", resultItem.ChurchTaxAmount)
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    </div>
</RadzenPanel>


@code
{
    private TaxComparerResultReportModel minimalTaxResult;
    private TaxComparerResultReportModel maximalTaxResult;

    private CapitalBenefitTaxComparerRequest taxRequest;
    private List<TaxComparerResultReportModel> taxCalculationResults = new();
    private PersonViewModel selectedPerson;
    private IReadOnlyCollection<PersonViewModel> persons;
    private RadzenDataGrid<TaxComparerResultReportModel> taxResultGrid;
    private ComputedProgressBar progressBar;

    private bool isResultAvailable;
    private bool isComputing;
    private int progressBarValue;

    protected override async Task OnInitializedAsync()
    {
        isResultAvailable = false;
        isComputing = false;
        taxRequest = new CapitalBenefitTaxComparerRequest
        {
            BfsNumberList = {}
        };
        persons = (await personService.GetPersonsAsync()).ToList();
    }

    private void HandleSelectPerson(Guid personId)
    {
        selectedPerson = persons.Single(item => item.Id == personId);

        taxRequest = new CapitalBenefitTaxComparerRequest
        {
            Name = selectedPerson.Name,
            CivilStatus = selectedPerson.CivilStatus,
            PartnerReligiousGroup = selectedPerson.PartnerReligiousGroupType,
            ReligiousGroup = selectedPerson.ReligiousGroupType,
            BfsNumberList = {},
            TaxableBenefits = 1_000_000
        };
    }

    private async Task OnSubmit()
    {
        taxCalculationResults = new List<TaxComparerResultReportModel>();

        isComputing = true;

        await foreach (CapitalBenefitTaxComparerResponse item in taxComparisonService.CalculateAsync(taxRequest))
        {
            taxCalculationResults.Add(new TaxComparerResultReportModel
            {
                MunicipalityName = item.MunicipalityName,
                MunicipalityId = item.MunicipalityId,
                Canton = item.Canton,
                TotalTaxAmount = item.TotalTaxAmount,
                MunicipalityTaxAmount = item.TaxDetails.MunicipalityTaxAmount,
                CantonTaxAmount = item.TaxDetails.CantonTaxAmount,
                FederalTaxAmount = item.TaxDetails.FederalTaxAmount,
                ChurchTaxAmount = item.TaxDetails.ChurchTaxAmount
            });

            progressBarValue = (int)(taxCalculationResults.Count / (item.TotalCount * 1.0) * 100);
            StateHasChanged();
            await Task.Delay(3);
        }

        isComputing = false;
        isResultAvailable = true;

        minimalTaxResult = GetMinimumModel();
        maximalTaxResult = GetMaximumModel();

        await taxResultGrid.Reload();
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Logger.LogInformation("InvalidSubmit");
    }

    private IEnumerable<TaxComparerResultReportModel> Data()
    {
        return taxCalculationResults;
    }


    public void Export(string type)
    {
        ExportService.Export("Vergleich Kapitalbezugssteuer", type, new Query() 
        { 
                OrderBy = taxResultGrid.Query.OrderBy,
                Filter = taxResultGrid.Query.Filter,
                Select = string.Join(",", taxResultGrid.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
        });
    }

    private decimal? GetMyMunicipalityTaxAmount()
    {
        return taxCalculationResults.SingleOrDefault(item => item.MunicipalityId == selectedPerson.BfsMunicipalityId)?.TotalTaxAmount;
    }

    private TaxComparerResultReportModel GetMinimumModel()
    {
        (decimal _, int index) = taxCalculationResults.Select((item,i) => (item.TotalTaxAmount, i)).Min();

        return taxCalculationResults[index];
    }

    private TaxComparerResultReportModel GetMaximumModel()
    {
        (decimal _, int index) = taxCalculationResults.Select((item, i) => (item.TotalTaxAmount, i)).Max();

        return taxCalculationResults[index];
    }
}
