@page "/TaxComparers"

@using PensionCoach.Tools.CommonTypes.Tax
@using Microsoft.Extensions.Logging
@using PensionCoach.Tools.CommonTypes
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using PensionCoach.Tools.TaxComparison

@inject IStringLocalizer<Resource> localizer
@inject ILogger<WealthPlanning> logger
@inject IPersonService personService
@inject ITaxCapitalBenefitsComparisonService taxComparisonService

<RadzenTemplateForm TItem="CapitalBenefitTaxComparerRequest" Data=@taxRequest Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
    <RadzenContent Container="main">
        <ChildContent>
            <RadzenHeading Size="H1" Text="Vergleichsrechner"></RadzenHeading>
            <RadzenSteps NextText="Nächster" PreviousText="Vorheriger">
                <Steps>
                    <RadzenStepsItem Text="Personen" Selected="true">
                        <FormStep Title="Auswahl" HelpText="Vergleiche die Steuer eines Kapitalbezug zwischen allen Schweizer Gemeinden.">
                            <div class="row">
                                <PersonSelector Persons="persons" OnSelect="@HandleSelectPerson"/>
                            </div>
                        </FormStep>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Steuerperson ändern" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep Title="Person"
                                      HelpText="Steuerlich relevante Angaben zur Person sind der Zivilstand,
die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter,
welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.
Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.">
                                <ChildContent>
                                    <div class="row">
                                        <RadzenFieldset Text="Person">
                                            <div class="row">
                                                <div class="col-md-3"><RadzenLabel Text="Name" /></div>
                                                <div class="col-md-9"><RadzenTextBox @bind-Value="taxRequest.Name" Name="simulationName" ReadOnly="true" /></div>

                                                <div class="col-md-3"><RadzenLabel Text="Zivilstand" /></div>
                                                <div class="col-md-9">
                                                    <CivilStatusSelector
                                                        SelectedCivilStatus="@taxRequest.CivilStatus"
                                                        OnSelected="@(args => taxRequest.CivilStatus = args)"/>
                                                </div>

                                                <div class="col-md-3"><RadzenLabel Text="Konfession" /></div>
                                                <div class="col-md-9">
                                                    <ReligiousGroupSelector
                                                        SelectedReligiousGroupType="@taxRequest.ReligiousGroup"
                                                        OnSelected="@(args => taxRequest.ReligiousGroup = args ?? ReligiousGroupType.Other)" />
                                                </div>
                                                @if (taxRequest.CivilStatus == CivilStatus.Married)
                                                {
                                                    <div class="col-md-3"><RadzenLabel Text="Konfession Partner" /></div>
                                                    <div class="col-md-9">
                                                        <ReligiousGroupSelector
                                                            SelectedReligiousGroupType="@taxRequest.PartnerReligiousGroup"
                                                            OnSelected="@(args => taxRequest.PartnerReligiousGroup = args)" />
                                                    </div>
                                                }
                                            </div>

                                        </RadzenFieldset>
                                    </div>
                                </ChildContent>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>

                    <RadzenStepsItem Text="Berechnung" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep Title="Simulation" HelpText="Das Ergebnis einer Simulation lässt sich von weiteren Parametern steuern. Welcher Betrag soll bezogen werden und mit welchen Gemeinden soll verglichen werden?">
                                <div class="col-md-3"><RadzenLabel Text="Kapitalbetrag" /></div>
                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="n0" @bind-Value="taxRequest.TaxableBenefits" Min="20000" /></div>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                </Steps>
            </RadzenSteps>
            
            <div class="row">
                <div class="col-md-12 text-right mt-1">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Berechne" Disabled="@(selectedPerson == null)"></RadzenButton>
                </div>
            </div>

        </ChildContent>
    </RadzenContent>
</RadzenTemplateForm>

@if (taxResponse != null)
{
        <RadzenPanel AllowCollapse="true">
        <div class="container">
        <div class="row">
            <div class="col-lg-3">
                <RadzenLabel Text="@taxResponse.Name" />
            </div>
            <div class="col-lg-9">
                <RadzenTree>
                    <RadzenTreeItem Text="@("Total Steuerbetrag: " + taxResponse.TotalTaxAmount)" Expanded="false">
                        <ChildContent>
                            <RadzenTreeItem Text=@("Gemeindesteuer: " + taxResponse.TaxDetails.MunicipalityTaxAmount)/>
                            <RadzenTreeItem Text=@("Staatssteuer: " + taxResponse.TaxDetails.CantonTaxAmount)/>
                                <RadzenTreeItem Text=@("Bundessteuer: " + taxResponse.TaxDetails.FederalTaxAmount) />
                                <RadzenTreeItem Text=@("Kirchensteuer: " + taxResponse.TaxDetails.ChurchTaxAmount) />
                            <RadzenTreeItem Text="Details" Expanded="false">
                                <ChildContent>
                                </ChildContent>
                            </RadzenTreeItem>
                        </ChildContent>
                    </RadzenTreeItem>
                </RadzenTree>

                <RadzenDataGrid AllowFiltering="false" AllowColumnResize="false" AllowPaging="false" AllowSorting="false"
                                TItem="FullTaxResponse">
                    <Columns>
                        <RadzenDataGridColumn TItem="FullTaxResponse" Property="Name" Filterable="false" Title="Name" TextAlign="TextAlign.Center"/>
                        <RadzenDataGridColumn TItem="FullTaxResponse" Property="TotalTaxAmount" Filterable="false" Title="Total Steuerbetrag" TextAlign="TextAlign.Right"/>
                        <RadzenDataGridColumn TItem="FullTaxResponse" Property="MunicipalityTaxAmount" Filterable="false" Title="Gemeindesteuer" TextAlign="TextAlign.Right"/>
                        <RadzenDataGridColumn TItem="FullTaxResponse" Property="CantonTaxAmount" Filterable="false" Title="Staatssteuer" TextAlign="TextAlign.Right"/>
                        <RadzenDataGridColumn TItem="FullTaxResponse" Property="FederalTaxAmount" Filterable="false" Title="Bundessteuer" TextAlign="TextAlign.Right"/>
                        <RadzenDataGridColumn TItem="FullTaxResponse" Property="WealthTaxAmount" Filterable="false" Title="Vermögenssteuer" TextAlign="TextAlign.Right"/>
                        <RadzenDataGridColumn TItem="FullTaxResponse" Property="ChurchTaxAmount" Filterable="false" Title="Kirchensteuer" TextAlign="TextAlign.Right"/>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <label>Rohdaten</label>
                <RadzenTextArea Name="output" Rows="10" ReadOnly="true" Value="@(JsonSerializer.Serialize(taxResponse))" Style="width: 100%"/>
            </div>
        </div>
        </div>
    </RadzenPanel>
}

@code
{
    private CapitalBenefitTaxComparerRequest taxRequest = new();
    private CapitalBenefitTaxComparerResponse taxResponse;
    private PersonViewModel selectedPerson;
    private IReadOnlyCollection<PersonViewModel> persons;

    protected override async Task OnInitializedAsync()
    {
        persons = (await personService.GetPersonsAsync()).ToList();
        taxRequest.BfsNumberList = new[] { 261, 3, 1344 };
    }

    private IEnumerable<CapitalBenefitTaxComparerResponse> GetTaxResponses()
    {
        return new[] { taxResponse };
    }

    private void HandleSelectPerson(Guid personId)
    {
        selectedPerson = persons.Single(item => item.Id == personId);

        taxRequest = new CapitalBenefitTaxComparerRequest
        {
            Name = selectedPerson.Name,
            CivilStatus = selectedPerson.CivilStatus,
            PartnerReligiousGroup = selectedPerson.PartnerReligiousGroupType,
            ReligiousGroup = selectedPerson.ReligiousGroupType,
        };
    }

    private async Task OnSubmit()
    {
        logger.LogInformation($"Tax request {JsonSerializer.Serialize(taxRequest)}");

        await foreach (CapitalBenefitTaxComparerResponse municipalityTaxResult in taxComparisonService.CalculateAsync(taxRequest))
        {
            logger.LogInformation($"Tax response {JsonSerializer.Serialize(municipalityTaxResult)}");
        }
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        logger.LogInformation("InvalidSubmit");
    }
}
