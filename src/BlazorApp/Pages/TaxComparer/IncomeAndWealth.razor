@page "/TaxComparer/IncomeAndWealth"

@using PensionCoach.Tools.TaxComparison
@using PensionCoach.Tools.CommonTypes
@using Domain.Enums

@inject IPersonService PersonService
@inject ITaxComparisonService TaxComparisonService
@inject IMunicipalityService MunicipalityService

<MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
    <MudGrid>
        <MudItem md="12">
            <MudText Typo="Typo.h5">Gemeindevergleich der Einkommens- und Vermögenssteuer</MudText>
        </MudItem>
        <MudItem md="12">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                <MudTabPanel Text="Person">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Vergleiche Einkommens- und Vermögenssteuer zwischen allen Schweizer Gemeinden.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <PersonSelector Persons="persons" OnSelect="@HandleSelectPerson" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Steuerdaten" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Steuerlich relevante Angaben zur Person sind der Zivilstand,
                                die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter,
                                welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.
                                Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <PersonDetails IsReadOnly="false" Person="@selectedPerson" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                
                <MudTabPanel Text="Berechnung" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Geben Sie die Kapitalbezüge ein, für welche Sie die Steuer berechnen möchten. Die Berechnung der Steuer erfolgt nach der kantonalen Steuermethode und die kann
                                von Kanton zu Kanton unterschiedlich sein.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <CantonSelector IsReadOnly="false" Label="Kanton" CantonCode="@filterPropertyCanton" OnSelected="@SetCanton"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            </MudTabs>
        </MudItem>

        <MudItem md="12">
            <MudButton OnClick="OnSubmit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(selectedPerson == null)">Berechne</MudButton>
        </MudItem>

    </MudGrid>
    
    @if (isComputing)
    {
        <ComputedProgressBar Value="@progressBarValue" Title=""/>
    }

    <TaxComparisonResult @ref="taxComparisonGrid" SelectedPerson="@selectedPerson" TaxCompareResultModels="@taxCalculationResults" />
</MudPaper>

@code
{
    private IncomeAndWealthComparerRequest taxRequest = new();
    private List<TaxComparerResultReportModel> taxCalculationResults = new();
    private PersonViewModel selectedPerson;
    private IReadOnlyCollection<PersonViewModel> persons;
    private TaxComparisonResult taxComparisonGrid;
    private Canton filterPropertyCanton;

    private bool isComputing;
    private int progressBarValue;

    protected override async Task OnInitializedAsync()
    {
        isComputing = false;
        taxRequest = new IncomeAndWealthComparerRequest();
        persons = (await PersonService.GetPersonsAsync()).ToList();
    }

    private void HandleSelectPerson(Guid personId)
    {
        selectedPerson = persons.Single(item => item.Id == personId);
        filterPropertyCanton = selectedPerson.Canton;
    }

    private async Task OnSubmit()
    {
        taxRequest = new IncomeAndWealthComparerRequest
            {
                Name = selectedPerson.Name,
                CivilStatus = selectedPerson.CivilStatus,
                PartnerReligiousGroup = selectedPerson.PartnerReligiousGroupType,
                ReligiousGroup = selectedPerson.ReligiousGroupType,
                TaxableFederalIncome = selectedPerson.TaxableFederalIncome,
                TaxableIncome = selectedPerson.TaxableIncome,
                TaxableWealth = selectedPerson.TaxableWealth,
            };

        taxRequest.BfsNumberList = await GetBfsNumberListAsync();

        taxCalculationResults = new List<TaxComparerResultReportModel>();
        
        isComputing = true;

        await foreach (TaxComparerResponse item in TaxComparisonService.CalculateAsync(taxRequest))
        {
            taxCalculationResults.Add(new TaxComparerResultReportModel
            {
                MunicipalityName = item.MunicipalityName,
                MunicipalityId = item.MunicipalityId,
                Canton = item.Canton,
                TotalTaxAmount = item.TotalTaxAmount,
                MunicipalityTaxAmount = item.TaxDetails.MunicipalityTaxAmount,
                CantonTaxAmount = item.TaxDetails.CantonTaxAmount,
                FederalTaxAmount = item.TaxDetails.FederalTaxAmount,
                ChurchTaxAmount = item.TaxDetails.ChurchTaxAmount,
            });

            progressBarValue = (int)(taxCalculationResults.Count / (item.TotalCount * 1.0) * 100);
        }

        taxComparisonGrid.Reload();

        isComputing = false;
        progressBarValue = 0;
    }

    private async Task<int[]> GetBfsNumberListAsync()
    {
        MunicipalityFilter filter = selectedPerson is null
            ? new()
            {
                CantonList = new Canton[] { },
                BfsNumberList = new[] { 261, 329, 902 },
            }
            : new MunicipalityFilter
            {
                CantonList = new[] { filterPropertyCanton },
                BfsNumberList = new[] { 261, 329, 902, selectedPerson.BfsMunicipalityId },
            };

        var result = await MunicipalityService.GetTaxSupportingAsync(filter);
      
        return result.Select(m => m.BfsMunicipalityNumber).ToArray();
    }

    private void SetCanton(Canton canton)
    {
        filterPropertyCanton = canton;
    }
}
