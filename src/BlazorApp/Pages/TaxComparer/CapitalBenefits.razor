@page "/TaxComparer/CapitalBenefits"

@using Microsoft.AspNetCore.Components
@using PensionCoach.Tools.TaxComparison

@inject IPersonService PersonService
@inject ITaxComparisonService TaxComparisonService

<MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
    <MudGrid>
        <MudItem md="12">
            <MudText Typo="Typo.h5">Gemeindevergleich Kapitalbezugssteuer</MudText>
        </MudItem>
        <MudItem md="12">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                <MudTabPanel Text="Person">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Vergleiche die Steuer eines Kapitalbezug zwischen allen Schweizer Gemeinden.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <PersonSelector Persons="persons" OnSelect="@HandleSelectPerson" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Steuerdaten" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Steuerlich relevante Angaben zur Person sind der Zivilstand,
                                die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter,
                                welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.
                                Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <PersonDetails IsReadOnly="false" Person="@selectedPerson" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
        </MudItem>

        <MudItem md="12">
            <MudButton OnClick="OnSubmit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(selectedPerson == null)">Berechne</MudButton>
        </MudItem>

    </MudGrid>
</MudPaper>

@if (isComputing)
{
    <ComputedProgressBar Value="@progressBarValue" Title=""/>
}

<TaxComparisonResult @ref="taxComparisonGrid" SelectedPerson="@selectedPerson" TaxCompareResultModels="@taxCalculationResults" />


@code
{
    private CapitalBenefitTaxComparerRequest taxRequest = new();
    private List<TaxComparerResultReportModel> taxCalculationResults = new();
    private PersonViewModel selectedPerson;
    private IReadOnlyCollection<PersonViewModel> persons;
    private TaxComparisonResult taxComparisonGrid;

    private bool isComputing;
    private int progressBarValue;

    protected override async Task OnInitializedAsync()
    {
        isComputing = false;
        taxRequest = new CapitalBenefitTaxComparerRequest();
        persons = (await PersonService.GetPersonsAsync()).ToList();
    }

    private void HandleSelectPerson(Guid personId)
    {
        selectedPerson = persons.Single(item => item.Id == personId);
    }

    private async Task OnSubmit()
    {
        taxCalculationResults = new List<TaxComparerResultReportModel>();

        taxRequest = new CapitalBenefitTaxComparerRequest
        {
            Name = selectedPerson.Name,
            CivilStatus = selectedPerson.CivilStatus,
            PartnerReligiousGroup = selectedPerson.PartnerReligiousGroupType,
            ReligiousGroup = selectedPerson.ReligiousGroupType,
            TaxableBenefits = 1_000_000
        };

        taxRequest.BfsNumberList = new[] { 261, 329, 902, selectedPerson.BfsMunicipalityId };

        isComputing = true;

        await foreach (TaxComparerResponse item in TaxComparisonService.CalculateAsync(taxRequest))
        {
            taxCalculationResults.Add(new TaxComparerResultReportModel
            {
                MunicipalityName = item.MunicipalityName,
                MunicipalityId = item.MunicipalityId,
                Canton = item.Canton,
                TotalTaxAmount = item.TotalTaxAmount,
                MunicipalityTaxAmount = item.TaxDetails.MunicipalityTaxAmount,
                CantonTaxAmount = item.TaxDetails.CantonTaxAmount,
                FederalTaxAmount = item.TaxDetails.FederalTaxAmount,
                ChurchTaxAmount = item.TaxDetails.ChurchTaxAmount
            });

            progressBarValue = (int)(taxCalculationResults.Count / (item.TotalCount * 1.0) * 100);
            StateHasChanged();
            await Task.Delay(3);
        }

        isComputing = false;

        progressBarValue = 0;

        taxComparisonGrid.Reload();
    }
}
