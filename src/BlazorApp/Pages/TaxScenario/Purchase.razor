@page "/TaxScenario/Purchase"

@using Microsoft.AspNetCore.Components
@using PensionCoach.Tools.CommonTypes
@using PensionCoach.Tools.CommonTypes.MultiPeriod
@using PensionCoach.Tools.TaxComparison

@inject IPersonService PersonService
@inject ITaxCalculationService TaxCalculationService
@inject ITaxScenarioService TaxScenarioService

<RadzenTemplateForm TItem="CapitalBenefitTransferInComparerRequest" Data=@taxRequest Submit=@OnSubmit>
    <RadzenContent Container="main">
        <ChildContent>
            <RadzenHeading Size="H1" Text="Steuerberechnung"></RadzenHeading>
            <RadzenSteps NextText="Nächster" PreviousText="Vorheriger">
                <Steps>
                    <RadzenStepsItem Text="Personen" Selected="true">
                        <FormStep Title="Auswahl" HelpText="Die Cashflow-Simulation basiert auf Angaben zur Person sowie steuerrevelanten Daten wie Wohnort, Einkommen und Vermögen.">
                            <div class="row">
                                <PersonSelector Persons="persons" OnSelect="@HandleSelectPerson" />
                            </div>
                        </FormStep>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Steuerperson ändern" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep Title="Person"
                                      HelpText="Steuerlich relevante Angaben zur Person sind der Zivilstand,
die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter,
welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.
Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.">
                                <ChildContent>
                                    <div class="row">
                                        <RadzenFieldset Text="Person">
                                            <div class="row">
                                                <div class="col-md-3"><RadzenLabel Text="Name" /></div>
                                                <div class="col-md-9"><RadzenTextBox @bind-Value="taxRequest.Name" Name="simulationName" ReadOnly="true" /></div>

                                                <div class="col-md-3"><RadzenLabel Text="Zivilstand" /></div>
                                                <div class="col-md-9">
                                                    <CivilStatusSelector SelectedCivilStatus="@taxRequest.CivilStatus"
                                                                         OnSelected="@(args => taxRequest.CivilStatus = args)" />
                                                </div>

                                                <div class="col-md-3"><RadzenLabel Text="Konfession" /></div>
                                                <div class="col-md-9">
                                                    <ReligiousGroupSelector SelectedReligiousGroupType="@taxRequest.ReligiousGroup"
                                                                            OnSelected="@(args => taxRequest.ReligiousGroup = args ?? ReligiousGroupType.Other)" />
                                                </div>
                                                @if (taxRequest.CivilStatus == CivilStatus.Married)
                                                {
                                                    <div class="col-md-3"><RadzenLabel Text="Konfession Partner" /></div>
                                                    <div class="col-md-9">
                                                        <ReligiousGroupSelector SelectedReligiousGroupType="@taxRequest.PartnerReligiousGroup"
                                                                                OnSelected="@(args => taxRequest.PartnerReligiousGroup = args)" />
                                                    </div>
                                                }
                                            </div>

                                        </RadzenFieldset>
                                    </div>
                                    <div class="row">

                                        <RadzenFieldset Text="Steuerdaten">
                                            <div class="row">
                                                <div class="col-md-3"><RadzenLabel Text="Lohn" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="n0" @bind-Value="taxRequest.TaxableIncome" /></div>

                                                <div class="col-md-3"><RadzenLabel Text="Vermögen" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="n0" @bind-Value="taxRequest.TaxableWealth" /></div>

                                                <div class="col-md-3"><RadzenLabel Text="Steuergemeinde" /></div>
                                                <div class="col-md-9">
                                                    <MunicipalitySelector BfsMunicipalityId="taxRequest.BfsMunicipalityId"
                                                                          OnSelected="m => { taxRequest.BfsMunicipalityId = m.BfsMunicipalityNumber; }" />
                                                </div>
                                                <div class="col-md-3">
                                                    <RadzenLabel Text="Steuerjahr" />
                                                </div>
                                                <div class="col-md-9">
                                                    <RadzenDropDown AllowClear="false" TValue="int"
                                                                    Data="@(supportedTaxYears)"
                                                                    @bind-Value="@taxRequest.CalculationYear" />
                                                </div>
                                            </div>
                                        </RadzenFieldset>
                                    </div>

                                </ChildContent>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Berechnung" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep Title="Simulation" HelpText="Das Ergebnis einer Simulation lässt sich von weiteren Parametern steuern.">
                            
                            <div class="row">
                                <div class="col-md-12">
                                    <h3>Mit Kapitalbezug</h3>
                                        <RadzenSwitch Value="withCapitalBenefitTaxation" ValueChanged="() => withCapitalBenefitTaxation = !withCapitalBenefitTaxation" />
                                </div>
                            </div>
                            
                                <RadzenCard Visible="withCapitalBenefitTaxation">
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <RadzenLabel Text="Bezugsdatum"/>
                                            </div>
                                            <div class="col-md-9">
                                                <RadzenDatePicker @bind-Value="taxRequest.DateOfCapitalBenefitTaxCalculation" DateFormat="d.M.yyyy"/>
                                            </div>
                                            <div class="col-md-3">
                                                <RadzenLabel Text="Vorsorgekapital (ohne Einkauf)"/>
                                            </div>
                                            <div class="col-md-9">
                                                <RadzenNumeric TValue="decimal" @bind-Value="taxRequest.CapitalBenefitBalance"/>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>

                        </ChildContent>
                    </RadzenStepsItem>
                </Steps>
            </RadzenSteps>

            <div class="row">
                <div class="col-md-12 text-right mt-1">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Berechne" Disabled="@(selectedPerson == null)"></RadzenButton>
                </div>
            </div>

        </ChildContent>
    </RadzenContent>
</RadzenTemplateForm>

@if (taxResponse != null)
{
    <div class="col-md-12">
        <RadzenChart>
            <RadzenColumnSeries Data="@(GetChartData())" CategoryProperty="XValue" Title="Vermögensentwicklung" LineType="LineType.Dashed" ValueProperty="YValue">
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenColumnSeries>

            <RadzenColumnOptions Radius="5" Width="40" />
            <RadzenCategoryAxis Padding="20" />

            <RadzenCategoryAxis Step="1" Min="@(taxResponse.StartingYear-1)" Max="@(taxResponse.StartingYear + taxResponse.NumberOfPeriods)">
                <RadzenAxisTitle Text="Jahr" />
            </RadzenCategoryAxis>

            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Ersparnis" />
            </RadzenValueAxis>
        </RadzenChart>
    </div>
}

@code {
    private CapitalBenefitTransferInComparerRequest taxRequest = new();
    private MultiPeriodResponse taxResponse;
    private PersonViewModel selectedPerson;
    private IReadOnlyCollection<PersonViewModel> persons;
    private int[] supportedTaxYears;
    private bool withCapitalBenefitTaxation;

    protected override async Task OnInitializedAsync()
    {
        Task<int[]> yearsTask = TaxCalculationService.SupportedTaxYearsAsync();
        persons = (await PersonService.GetPersonsAsync()).ToList();

        supportedTaxYears = await yearsTask;
    }

    private void HandleSelectPerson(Guid personId)
    {
        selectedPerson = persons.Single(item => item.Id == personId);

        int calculationYear = supportedTaxYears.Max();

        taxRequest = new CapitalBenefitTransferInComparerRequest
        {
            Name = selectedPerson.Name,
            CivilStatus = selectedPerson.CivilStatus,
            TaxableIncome = selectedPerson.TaxableIncome,
            TaxableWealth = selectedPerson.TaxableWealth,
            TaxableFederalIncome = selectedPerson.TaxableIncome,
            PartnerReligiousGroup = selectedPerson.PartnerReligiousGroupType,
            ReligiousGroup = selectedPerson.ReligiousGroupType,
            BfsMunicipalityId = selectedPerson.BfsMunicipalityId,
                CalculationYear = calculationYear,
            TransferIns = new List<TransferInModel>
            {
                new (10000, new DateTime(calculationYear+1,1,1)),
                new (10000, new DateTime(calculationYear+2,1,1)),
                new (10000, new DateTime(calculationYear+3,1,1)),
            },
            WithCapitalBenefitTaxation = false,
            CapitalBenefitBalance = 0,
            NetReturnRate = 0.01M,
            DateOfCapitalBenefitTaxCalculation = null,
        };
    }

    private async Task OnSubmit()
    {
        taxResponse = await TaxScenarioService.CalculateAsync(taxRequest);
    }

    private TaxCurve.CurvePoint[] GetChartData()
    {
        List<TaxCurve.CurvePoint> points = new();

        for (int year = taxResponse.StartingYear; year < taxResponse.NumberOfPeriods + taxResponse.StartingYear; year++)
        {
            points.Add(new TaxCurve.CurvePoint
            {
                XValue = year,
                YValue = taxResponse.Accounts
                    .SingleOrDefault(item => item.AccountType == AccountType.Wealth && item.Year == year)?.Amount ?? decimal.Zero
            });
        }

        return points.ToArray();
    }
}
