@page "/TaxScenario/Purchase"

@using PensionCoach.Tools.CommonTypes.MultiPeriod
@using System.Globalization
@using ApexCharts;
@using Application.Features.TaxScenarios.Models
@using Domain.Enums
@using Domain.Models.MultiPeriod
@using Domain.Models.Tax
@using Color = MudBlazor.Color

@inject IPersonService PersonService
@inject IApexChartConfigurator ChartConfigurator
@inject ITaxCalculationService TaxCalculationService
@inject ITaxScenarioService TaxScenarioService

<MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
    <MudGrid>
        <MudItem md="12">
            <MudText Typo="Typo.h5">Einkauf in die Pensionskasse</MudText>
        </MudItem>
        <MudItem md="12">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                <MudTabPanel Text="Person">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Die Cashflow-Simulation basiert auf Angaben zur Person sowie steuerrevelanten Daten wie Wohnort, Einkommen und Vermögen.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <PersonSelector Persons="persons" OnSelect="@HandleSelectPerson"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Steuerdaten" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Steuerlich relevante Angaben zur Person sind der Zivilstand,
                                die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter,
                                welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.
                                Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <PersonDetails IsReadOnly="false" Person="@selectedPerson"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Einkauf" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Der Gesamtbetrag des Einkaufs wird auf die Anzahl Einkäufe aufgeteilt.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <MudNumericField T="decimal" Label="Gesamtbetrag" Format="n0" Step="5000" Min="1000"@bind-Value="transferInAmount" Culture="CultureInfo.InvariantCulture"/>
                            <MudNumericField T="int" Label="Anzahl Einkäufe" Format="n0" @bind-Value="numberOfTransferIns" Min="1" Culture="CultureInfo.InvariantCulture"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Kapitalbezug" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Die Simulation kann auch einen Kapitalbezug simulieren. Der Bezug des Vorsorgekapital ist steuerpflichtig,
                                weshalb die Höhe des vorhandenen Vorsorgekapital einen Einfluss auf die Steuerbelastung hat.
                                Dabei wird das Vorsorgekapital zu einem bestimmten Zeitpunkt bezogen (oder über mehrere Jahre verteilt).
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <MudSwitch @bind-Checked="taxRequest.WithCapitalBenefitTaxation" Color="Color.Primary"/>

                            <MudNumericField T="int" Disabled="@(!taxRequest.WithCapitalBenefitTaxation)" Label="Bezugsjahr" Format="n0" @bind-Value="yearOfFirstWithdrawal" Max="2099" Culture="CultureInfo.InvariantCulture"/>
                            <MudNumericField T="decimal" Disabled="@(!taxRequest.WithCapitalBenefitTaxation)" Label="Vorsorgekapital (ohne Einkauf)" Format="n0" Step="1000" @bind-Value="totalWithdrawalAmount" Culture="CultureInfo.InvariantCulture"/>
                            <MudNumericField T="int" Disabled="@(!taxRequest.WithCapitalBenefitTaxation)" Label="Anzahl Bezüge" Format="n0" @bind-Value="numberOfWithdrawals" Min="1" Culture="CultureInfo.InvariantCulture"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Berechnung" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Das Ergebnis einer Simulation lässt sich von weiteren Parametern steuern.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <MudSwitch @bind-Checked="@WithSalary" Color="Color.Primary" Label="Jährliches Einkommen berücksichtigen" Size="MudBlazor.Size.Small"/>
                            <MudNumericField T="decimal" Label="Rendite p.a. auf Vermögen" Format="p2" Step="0.005M" @bind-Value="taxRequest.NetWealthReturn" Culture="CultureInfo.InvariantCulture"/>
                            <MudNumericField T="decimal" Label="Rendite p.a. Vorsorgekapitalien" Format="p2" Step="0.005M" @bind-Value="taxRequest.NetPensionCapitalReturn" Culture="CultureInfo.InvariantCulture"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
        </MudItem>

        <MudItem md="12">
            <MudButton OnClick="OnSubmit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(selectedPerson == null)">Berechne</MudButton>
        </MudItem>

    </MudGrid>
</MudPaper>

@if (showLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}

@if (taxResponse != null)
{
    <MudExpansionPanels Class="mb-4 pa-6">
        <MudExpansionPanel Text="Netto Vermögenszuwachs" IsInitiallyExpanded="true">
            <ApexChart @ref=netChart
                TItem="TaxCurve.CurvePoint"
                Options="@netOptions"
                Height="400"
                XAxisType="XAxisType.Numeric"
                FormatYAxisLabel="GetYAxisLabel">

                <ApexPointSeries
                    Name="Netto Vermögen"
                    TItem="TaxCurve.CurvePoint"
                    Items="@netWealthDataPoints"
                    SeriesType="SeriesType.Bar"
                    Color="@(ChartConfigurator.PrimaryColor(IsDarkMode))"
                    OrderBy="p => p.X"
                    XValue="p => p.XValue"
                    YValue="p => p.YValue"
                    ShowDataLabels/>

            </ApexChart>
        </MudExpansionPanel>

        <MudExpansionPanel Text="Detailsicht">
            <ApexChart
                @ref=scenarioChart
                TItem="TaxCurve.CurvePoint"
                Title="Vermögensentwicklung mit Einkäufen"
                Options="@scenarioOptions"
                Height="400"
                XAxisType="XAxisType.Numeric"
                FormatYAxisLabel="GetYAxisLabel">

                <ApexPointSeries
                    Name="Vermögen"
                    TItem="TaxCurve.CurvePoint"
                    Items="@(SeriesData(taxResponse.ScenarioSeries.ToList(), AccountType.Wealth))"
                    SeriesType="SeriesType.Bar"
                    Color="@(ChartConfigurator.PrimaryColor(IsDarkMode))"
                    OrderBy="p => p.X"
                    XValue="p => p.XValue"
                    YValue="p => p.YValue"
                    ShowDataLabels/>

                <ApexPointSeries
                    Name="2.Säule"
                    TItem="TaxCurve.CurvePoint"
                    Items="@(SeriesData(taxResponse.ScenarioSeries.ToList(), AccountType.OccupationalPension))"
                    SeriesType="SeriesType.Bar"
                    Color="@(ChartConfigurator.SecondaryColor(IsDarkMode))"
                    OrderBy="p => p.X"
                    XValue="p => p.XValue"
                    YValue="p => p.YValue"
                    ShowDataLabels/>
            </ApexChart>

            <ApexChart @ref=benchmarkChart
                TItem="TaxCurve.CurvePoint"
                Title="Vermögensentwicklung ohne Einkäufen"
                Options="@benchmarkOptions"
                Height="400"
                XAxisType="XAxisType.Numeric"
                FormatYAxisLabel="GetYAxisLabel">

                <ApexPointSeries
                    Name="Vermögen"
                    TItem="TaxCurve.CurvePoint"
                    Items="@(SeriesData(taxResponse.BenchmarkSeries.ToList(), AccountType.Wealth))"
                    SeriesType="SeriesType.Bar"
                    Color="@(ChartConfigurator.PrimaryColor(IsDarkMode))"
                    OrderBy="p => p.X"
                    XValue="p => p.XValue"
                    YValue="p => p.YValue"
                    ShowDataLabels/>

                <ApexPointSeries
                    Name="2.Säule"
                    TItem="TaxCurve.CurvePoint"
                    Items="@(SeriesData(taxResponse.BenchmarkSeries.ToList(), AccountType.OccupationalPension))"
                    SeriesType="SeriesType.Bar"
                    Color="@(ChartConfigurator.SecondaryColor(IsDarkMode))"
                    OrderBy="p => p.X"
                    XValue="p => p.XValue"
                    YValue="p => p.YValue"
                    ShowDataLabels/>
            </ApexChart>
        </MudExpansionPanel>

    </MudExpansionPanels>
}

@code {
    private bool showLoading;
    private bool WithSalary;
    private CapitalBenefitTransferInComparerRequest taxRequest;
    private ScenarioCalculationResponse taxResponse;
    private PersonViewModel selectedPerson;
    private IReadOnlyCollection<PersonViewModel> persons;
    private int[] supportedTaxYears;
    private decimal totalWithdrawalAmount;
    private decimal transferInAmount;
    private int numberOfTransferIns;
    private int numberOfWithdrawals;
    private int yearOfFirstWithdrawal;
    private ApexChartOptions<TaxCurve.CurvePoint> netOptions;
    private ApexChartOptions<TaxCurve.CurvePoint> scenarioOptions;
    private ApexChartOptions<TaxCurve.CurvePoint> benchmarkOptions;
    private ApexChart<TaxCurve.CurvePoint> netChart;
    private ApexChart<TaxCurve.CurvePoint> scenarioChart;
    private ApexChart<TaxCurve.CurvePoint> benchmarkChart;
    private TaxCurve.CurvePoint[] netWealthDataPoints;
    private TaxCurve.CurvePoint[] scenario1DataPoints;
    private TaxCurve.CurvePoint[] scenario2DataPoints;
    private TaxCurve.CurvePoint[] benchmark1DataPoints;
    private TaxCurve.CurvePoint[] benchmark2DataPoints;

    [CascadingParameter]
    public bool IsDarkMode { get; set; }

    [CascadingParameter]
    public MudTheme _theme { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string formatter = "function(val) { return val.toFixed(0) }";
        netOptions = ChartConfigurator.CurvePointOptions(IsDarkMode);
        netOptions.DataLabels = new DataLabels
        {
            Enabled = true,
            Formatter = formatter
        };

        scenarioOptions = ChartConfigurator.CurvePointOptions(IsDarkMode);
        scenarioOptions.Chart.Stacked = true;
        scenarioOptions.DataLabels = new DataLabels
        {
            Enabled = true,
            Formatter = formatter,

        };
        scenarioOptions.PlotOptions = new PlotOptions
        {
            Bar = new PlotOptionsBar
            {
                DataLabels = new PlotOptionsBarDataLabels()
                {
                    Total = new BarTotalDataLabels
                    {
                        Enabled = true,
                    }
                }
            }
        };

        benchmarkOptions = ChartConfigurator.CurvePointOptions(IsDarkMode);
        benchmarkOptions.Chart.Stacked = true;
        benchmarkOptions.DataLabels = new DataLabels
        {
            Enabled = true,
            Formatter = formatter
        };
        benchmarkOptions.PlotOptions = new PlotOptions
            {
                Bar = new PlotOptionsBar
                {
                    DataLabels = new PlotOptionsBarDataLabels()
                    {
                        Total = new BarTotalDataLabels
                        {
                            Enabled = true,
                        }
                    }
                }
            };

        taxRequest = new CapitalBenefitTransferInComparerRequest();
        Task<int[]> yearsTask = TaxCalculationService.SupportedTaxYearsAsync();
        persons = (await PersonService.GetPersonsAsync()).ToList();

        supportedTaxYears = await yearsTask;

        transferInAmount = 15000;
        totalWithdrawalAmount = 500_000;
        numberOfTransferIns = 3;
        numberOfWithdrawals = 1;
        yearOfFirstWithdrawal = DateTime.Today.Year + 10;
    }

    private void HandleSelectPerson(Guid personId)
    {
        selectedPerson = persons.Single(item => item.Id == personId);

        totalWithdrawalAmount = selectedPerson.FinalRetirementCapital;

        taxRequest = new CapitalBenefitTransferInComparerRequest
        {
            Name = selectedPerson.Name,
            CivilStatus = selectedPerson.CivilStatus,
            TaxableIncome = selectedPerson.TaxableIncome,
            TaxableWealth = selectedPerson.TaxableWealth,
            TaxableFederalIncome = selectedPerson.TaxableIncome,
            PartnerReligiousGroup = selectedPerson.PartnerReligiousGroupType,
            ReligiousGroup = selectedPerson.ReligiousGroupType,
            BfsMunicipalityId = selectedPerson.BfsMunicipalityId,
            WithCapitalBenefitTaxation = false,
            NetWealthReturn = 0.01M,
        };
    }

    private async Task OnSubmit()
    {
        showLoading = true;

        try
        {
            int beginOfTransferInYear = supportedTaxYears.Max();
            int beginOfWithdrawalYear = yearOfFirstWithdrawal;

            taxRequest.TaxableIncome = selectedPerson.TaxableIncome;
            taxRequest.TaxableFederalIncome = selectedPerson.TaxableIncome;
            taxRequest.TaxableWealth = selectedPerson.TaxableWealth;
            taxRequest.CivilStatus = selectedPerson.CivilStatus;
            taxRequest.ReligiousGroup = selectedPerson.ReligiousGroupType;
            taxRequest.PartnerReligiousGroup = selectedPerson.PartnerReligiousGroupType;
            taxRequest.BfsMunicipalityId = selectedPerson.BfsMunicipalityId;

            taxRequest.CalculationYear = beginOfTransferInYear;
            taxRequest.CapitalBenefitsBeforeWithdrawal = totalWithdrawalAmount;

            taxRequest.TransferIns = CreateTransferIns(transferInAmount, numberOfTransferIns, beginOfTransferInYear);
            taxRequest.Withdrawals = CreateWithdrawals(numberOfWithdrawals, beginOfWithdrawalYear);

            taxResponse = await TaxScenarioService.CalculateAsync(taxRequest);

            netWealthDataPoints = NetWealthDataPoints();
            scenario1DataPoints = SeriesData(taxResponse.ScenarioSeries.ToList(), AccountType.Wealth);
            scenario2DataPoints = SeriesData(taxResponse.ScenarioSeries.ToList(), AccountType.OccupationalPension);
            benchmark1DataPoints = SeriesData(taxResponse.BenchmarkSeries.ToList(), AccountType.Wealth);
            benchmark2DataPoints = SeriesData(taxResponse.BenchmarkSeries.ToList(), AccountType.OccupationalPension);

            if (netChart is not null)
            {
                netChart.Series[0].Items = netWealthDataPoints;

                await netChart.RenderAsync();
            }

            if (scenarioChart is not null)
            {
                scenarioChart.Series[0].Items = scenario1DataPoints;
                scenarioChart.Series[1].Items = scenario2DataPoints;

                await scenarioChart.RenderAsync();
            }

            if (benchmarkChart is not null)
            {
                benchmarkChart.Series[0].Items = benchmark1DataPoints;
                benchmarkChart.Series[1].Items = benchmark2DataPoints;

                await benchmarkChart.RenderAsync();
            }
        }
        finally
        {
            showLoading = false;
        }

        IReadOnlyCollection<SingleTransferInModel> CreateWithdrawals(int years, int startingYear)
        {
            if(years == 0)
            {
                return new List<SingleTransferInModel>();
            }
            
            List<SingleTransferInModel> transferIns = new();

            for (int ii = 0; ii < years; ii++)
            {
                decimal fraction = decimal.One / (years - ii);
                transferIns.Add(new SingleTransferInModel(fraction, new DateTime(startingYear + ii, 1, 1)));
            }

            return transferIns.ToList();
        }

        IReadOnlyCollection<SingleTransferInModel> CreateTransferIns(decimal amount, int years, int startingYear)
        {
            if(years == 0)
            {
                return new List<SingleTransferInModel>();
            }

            List<SingleTransferInModel> transferIns = new();
            decimal amountPerYear = amount / years;

            for (int ii = 0; ii < years; ii++)
            {
                transferIns.Add(new SingleTransferInModel(amountPerYear, new DateTime(startingYear + ii, 1, 1)));
            }

            return transferIns.ToList();
        }
    }

    private TaxCurve.CurvePoint[] NetWealthDataPoints()
    {
        List<TaxCurve.CurvePoint> points = new();

        for (int year = taxResponse.StartingYear; year < taxResponse.NumberOfPeriods + taxResponse.StartingYear; year++)
        {
            points.Add(new TaxCurve.CurvePoint
            {
                XValue = year,
                    YValue = taxResponse.DeltaSeries
                    .Where(item => item.Year == year)
                    .Sum(item => item.Amount)
            });
        }

        return points.ToArray();
    }

    private TaxCurve.CurvePoint[] SeriesData(IReadOnlyCollection<SinglePeriodCalculationResult> series, AccountType accountType)
    {
        List<TaxCurve.CurvePoint> points = new();

        for (int year = taxResponse.StartingYear; year < taxResponse.NumberOfPeriods + taxResponse.StartingYear; year++)
        {
            points.Add(new TaxCurve.CurvePoint
            {
                XValue = year,
                YValue = series
                    .Where(item => item.AccountType == accountType &&
                                   item.Year == year)
                    .Sum(item => item.Amount)
            });
        }

        return points.ToArray();
    }

    private string GetYAxisLabel(decimal value)
    {
        return value.ToString("N0");
    }

}