@page "/PersonListing"

@inject IPersonService PersonService
@inject IDialogService DialogService

<MudPaper Class="mb-4 pa-4 align-center" Elevation="0">
    <MudGrid>
        <MudItem md="6" Class="d-flex justify-start align-center">
            <MudText Typo="Typo.h5">Personenverzeichnis</MudText>
        </MudItem>
        <MudItem md="6" Class="d-flex justify-end">
            <MudIconButton OnClick="@(OpenPerson)" Icon="@Icons.Material.Filled.PersonAddAlt1"/>
        </MudItem>
    </MudGrid>
</MudPaper>

@foreach (var person in persons)
{
    <MudPaper Elevation="2" Class="ma-4 pa-4">
        <PersonView Person="person" OnDelete="@DeletePerson" OnEdit="@EditPerson" OnCopy="@CopyPerson"/>
    </MudPaper>
}

@code
{
    private List<PersonViewModel> persons = new();

    protected override async Task OnInitializedAsync()
    {
        persons = (await PersonService.GetPersonsAsync()).ToList();
    }

    private async Task OpenPerson()
    {
        PersonViewModel newPerson = new();

        bool ok = await OpenDialogAsync("Neue Person anlegen", newPerson);

        if (ok)
        {
            persons.Add(newPerson);
            await PersonService.AddAsync(newPerson);
        }
    }

    private async Task DeletePerson(Guid id)
    {
        persons.RemoveAll(p => p.Id == id);
        await PersonService.DeletePersonAsync(id);
    }

    private async Task EditPerson(Guid id)
    {
        PersonViewModel person = persons.SingleOrDefault(p => p.Id == id);

        if (person is null)
        {
            return;
        }

        PersonViewModel shadowPerson = person with { };

        bool hasChange = await OpenDialogAsync("Person ändern", shadowPerson);

        if (hasChange)
        {
            person.Update(shadowPerson);

            await PersonService.UpdateAsync(person);
        }
    }

    private async Task CopyPerson(Guid id)
    {
        PersonViewModel sourcePerson = persons.SingleOrDefault(p => p.Id == id);

        if (sourcePerson is null)
        {
            return;
        }

        PersonViewModel copyPerson = new()
        {
            Id = Guid.NewGuid(),
            BfsMunicipalityId = sourcePerson.BfsMunicipalityId,
            Canton = sourcePerson.Canton,
            MunicipalityName = sourcePerson.MunicipalityName,
            Name = $"{sourcePerson.Name} (Copy)",
            CivilStatus = sourcePerson.CivilStatus,
            Gender = sourcePerson.Gender,
            TaxableIncome = sourcePerson.TaxableIncome,
            TaxableWealth = sourcePerson.TaxableWealth,
            FinalCapital3a = sourcePerson.FinalCapital3a,
            FinalRetirementCapital = sourcePerson.FinalRetirementCapital,
            DateOfBirth = sourcePerson.DateOfBirth
        };

        bool isDone = await OpenDialogAsync("Person ändern", copyPerson);

        if (isDone)
        {
            persons.Add(copyPerson);
            await PersonService.AddAsync(copyPerson);
        }
    }

    private async Task<bool> OpenDialogAsync(string title, PersonViewModel person)
    {
        IDialogReference result = await DialogService.ShowAsync<PersonEdit>(
            title,
            new DialogParameters { { "Person", person } },
            new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium });

        DialogResult dialogResult = await result.Result;

        return !dialogResult.Canceled;
    }
}