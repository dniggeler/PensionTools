@page "/WealthPlanning"

@using Microsoft.Extensions.Logging
@using PensionCoach.Tools.CommonTypes
@using PensionCoach.Tools.CommonTypes.MultiPeriod
@using PensionCoach.Tools.CommonTypes.MultiPeriod.Actions
@using PensionCoach.Tools.CommonTypes.MultiPeriod.Definitions
@using PensionCoach.Tools.CommonTypes.Tax
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using Radzen
@using Radzen.Blazor
@using System.Globalization

@inject ILogger<WealthPlanning> Logger
@inject IMultiPeriodCalculationService MultiPeriodCalculationService
@inject IPersonService PersonService

<MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
    <MudGrid>
        <MudItem md="12">
            <MudText Typo="Typo.h5">Steuerberechnung</MudText>
        </MudItem>

        <MudItem md="12">

            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                <MudTabPanel Text="Person">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Die Cashflow-Simulation basiert auf Angaben zur Person sowie steuerrevelanten Daten wie Wohnort, Einkommen und Vermögen.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <PersonSelector Persons="persons" OnSelect="@HandleSelectPerson"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                
                <MudTabPanel Text="Steuerdaten" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Steuerlich relevante Angaben zur Person sind der Zivilstand,
                                die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter,
                                welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.
                                Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <PersonDetails IsReadOnly="false" Person="@selectedPerson"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                
                <MudTabPanel Text="Cash-Flow Actions" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.subtitle1">
                                Wohnortwechsel
                            </MudText>
                            <MudText Typo="Typo.body2">
                                Ab einem gewünschten Jahr kann die Wohngemeinde geändert werden, was einen Einfluss auf alle Steuern hat,
                                insbesondere wenn die neue Gemeinde in einem anderen Kanton liegt.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <MudSwitch @bind-Checked="isChangeResidenceActive" Color="Color.Primary"/>

                            @if (isChangeResidenceActive)
                            {
                                <MudPaper Elevation="1" Class="pa-4">
                                    <MudDatePicker Label="Gültig ab" Editable="true" @bind-Date="dateOfProcessChangeResidence" DateFormat="dd.MM.yyyy"/>
                                    <MudNumericField Label="Kosten" Format="n0" Step="100" @bind-Value="changeResidenceModel.ChangeCost" Culture="CultureInfo.InvariantCulture" />
                                    <ResidenceSelector BfsMunicipalityId="changeResidenceModel.DestinationMunicipalityId"
                                                       CantonCode="changeResidenceModel.DestinationCanton"
                                                       MunicipalityName="@newDomicileName"
                                                       Label="Domizil"
                                                       IsReadOnly="false"
                                                       OnSelected="HandleChangeResidence" />
                                </MudPaper>
                            }

                        </MudItem>
                        
                        <MudItem md="4">
                            <MudText Typo="Typo.subtitle1">
                                Transfers
                            </MudText>
                            <MudText Typo="Typo.body2">
                                Für ein gewähltes Jahr kann Guthaben von einem Ursrpungs- zu einem Zielkonto transferiert werden. Das Guthaben kann ein Betrag oder ein Prozentssatz sein.
                                Transfer-Transaktionen dieser Art gibt es insbesondere in der Vorsorge: ein 3a-Konto wird aufgelöst oder bei Pensionierung lässt man sich das Geld auszahlen.
                                Wie im Fall einer Auflösung des 3a-Kontos fallen auch Steuern an.
                                <br />
                                <i>Aktuell werden alle Vorsorge-Konti zum gewünschten Zeitpunkt geräumt und versteuert und dem Vermögenskonto gutgeschrieben.</i>
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <MudSwitch @bind-Checked="isClearActionActive" Color="Color.Primary"/>

                            @if (isClearActionActive)
                            {
                                <MudPaper Elevation="1" Class="pa-4">
                                    <ClearAccountActionDefinitionForm Definition="clearAccountAction"></ClearAccountActionDefinitionForm>
                                </MudPaper>
                            }
                        </MudItem>
                        
                        <MudItem md="4">
                            <MudText Typo="Typo.subtitle1">
                                Generische Zu- und Abflüsse
                            </MudText>
                            <MudText Typo="Typo.body2">
                                Einmalige oder periodische Kapitalflüsse, die einer Steuer unterliegen. Mit einem Geldfluss sind immer zwei Konti verbunden.
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <MudPaper Elevation="1" Class="pa-4">
                                <MudText Typo="Typo.subtitle2">
                                    Vorsorge
                                </MudText>
                                <MudExpansionPanels>
                                    @foreach (StaticGenericCashFlowDefinition definition in genericCashFlowDefinitions)
                                    {
                                        <MudExpansionPanel Text="@definition.Header.Name">
                                            <GenericCashFlowDefinitionForm Definition="definition" />
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                </MudTabPanel>
                
                <MudTabPanel Text="Berechnung" Disabled="@(selectedPerson is null)">
                    <MudItem md="4">
                        <MudText Typo="Typo.body2">
                            Das Ergebnis einer Simulation lässt sich von weiteren Parametern steuern.
                        </MudText>
                    </MudItem>
                    <MudItem md="8">
                        
                    </MudItem>
                </MudTabPanel>
            </MudTabs>
        </MudItem>

    </MudGrid>
</MudPaper>

<RadzenTemplateForm TItem="MultiPeriodRequest" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
    <RadzenContent Container="main">
        <ChildContent>
            <RadzenHeading Size="H1" Text="Finanzplanung">
            </RadzenHeading>
            <RadzenSteps NextText="Nächster" PreviousText="Vorheriger">
                <Steps>
                    <RadzenStepsItem Text="Personen" Selected="true">
                        <FormStep Title="Auswahl" HelpText="Die Cashflow-Simulation basiert auf Angaben zur Person sowie steuerrevelanten Daten wie Wohnort, Einkommen und Vermögen.">
                            <div class="row"><PersonSelector Persons="persons" OnSelect="@HandleSelectPerson"/></div>
                        </FormStep>
                    </RadzenStepsItem>

                    <RadzenStepsItem Text="Steuerperson ändern" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep Title="Person"
                                      HelpText="Steuerlich relevante Angaben zur Person sind der Zivilstand,
die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter,
welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.
Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.">
                                <ChildContent>
                                    <div class="row">
                                        <RadzenFieldset Text="Person">
                                            <div class="row">
                                                <div class="col-md-3"><RadzenLabel Text="Name" /></div>
                                                <div class="col-md-9"><RadzenTextBox @bind-Value="model.Name" Name="simulationName" /></div>

                                                <div class="col-md-3"><RadzenLabel Text="Zivilstand" /></div>
                                                <div class="col-md-9">
                                                    <CivilStatusSelector
                                                        SelectedCivilStatus="@taxPerson.CivilStatus"
                                                        OnSelected="@(args => taxPerson.CivilStatus = args)"/>
                                                </div>

                                                <div class="col-md-3"><RadzenLabel Text="Konfession" /></div>
                                                <div class="col-md-9">
                                                    <ReligiousGroupSelector
                                                        SelectedReligiousGroupType="@taxPerson.ReligiousGroupType"
                                                        OnSelected="@(args => taxPerson.ReligiousGroupType = args ?? ReligiousGroupType.Other)" />
                                                </div>
                                                @if (taxPerson.CivilStatus == CivilStatus.Married)
                                            {
                                                <div class="col-md-3"><RadzenLabel Text="Konfession Partner" /></div>
                                                <div class="col-md-9">
                                                    <ReligiousGroupSelector
                                                        SelectedReligiousGroupType="@taxPerson.PartnerReligiousGroupType"
                                                        OnSelected="@(args => taxPerson.PartnerReligiousGroupType = args)" />
                                                </div>
                                            }
                                            </div>

                                        </RadzenFieldset>
                                    </div>
                                    <div class="row">
                                        <RadzenFieldset Text="Vorsorge">
                                            <div class="col-md-3"><RadzenLabel Text="Geburtstag" /></div>
                                            <div class="col-md-9"><RadzenDatePicker @bind-Value="birthdate" DateFormat="d.M.yyyy"/></div>

                                        </RadzenFieldset>

                                        <RadzenFieldset Text="Steuerdaten">
                                            <div class="row">
                                                <div class="col-md-3"><RadzenLabel Text="Lohn" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="n0" @bind-Value="model.Income" /></div>

                                                <div class="col-md-3"><RadzenLabel Text="Vermögen" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="n0" @bind-Value="model.Wealth" /></div>
                                                <div class="col-md-3"><RadzenLabel Text="Steuergemeinde" /></div>
                                                <div class="col-md-9">
                                                    <MunicipalitySelector BfsMunicipalityId="model.BfsMunicipalityId" OnSelected="m => { model.BfsMunicipalityId = m.BfsMunicipalityNumber; }" />
                                                </div>
                                            </div>
                                        </RadzenFieldset>

                                    </div>
                                </ChildContent>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>

                    <RadzenStepsItem Text="Cash-Flow Actions" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep
                                Title="Wohnortwechsel"
                                HelpText="Ab einem gewünschten Jahr kann die Wohngemeinde geändert werden, was einen Einfluss auf alle Steuern hat, insbesondere wenn die neue Gemeinde in einem anderen Kanton liegt.">
                                <div class="row">
                                    <div class="col-md-12">
                                        <h5>Steuergemeinde wechseln</h5>
                                        <RadzenSwitch Value="isChangeResidenceActive" ValueChanged="() => isChangeResidenceActive = !isChangeResidenceActive"/>
                                    </div>
                                </div>

                                <RadzenCard Visible="isChangeResidenceActive">
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-3"><RadzenLabel Text="Jahr" /></div>
                                            <div class="col-md-9"><RadzenDatePicker @bind-Value="changeResidenceModel.DateOfProcess" DateFormat="d.M.yyyy"/></div>
                                            <div class="col-md-3"><RadzenLabel Text="Kosten" /></div>
                                            <div class="col-md-9"><RadzenNumeric TValue="decimal" @bind-Value="changeResidenceModel.ChangeCost" /></div>
                                            <div class="col-md-3"><RadzenLabel Text="Gemeinde" /></div>
                                            <div class="col-md-9"><MunicipalitySelector
                                                BfsMunicipalityId="changeResidenceModel.DestinationMunicipalityId"
                                                OnSelected="HandleChangeResidence" /></div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>

                            <FormStep 
                                Title="Transfers"
                                HelpText="Für ein gewähltes Jahr kann Guthaben von einem Ursrpungs- zu einem Zielkonto transferiert werden. Das Guthaben kann ein Betrag oder ein Prozentssatz sein.
                                           Transfer-Transaktionen dieser Art gibt es insbesondere in der Vorsorge: ein 3a-Konto wird aufgelöst oder bei Pensionierung lässt man sich das Geld auszahlen.
                                           Wie im Fall einer Auflösung des 3a-Kontos fallen auch Steuern an.">

                                <div class="row">
                                    <div class="col-md-12">
                                        <h3>Kapitalbezug</h3>
                                        <RadzenSwitch Value="isClearActionActive" ValueChanged="() => isClearActionActive = !isClearActionActive"/>
                                    </div>
                                </div>

                                <RadzenCard Visible="isClearActionActive">
                                    <ChildContent>
                                        <ClearAccountActionDefinitionForm Definition="clearAccountAction"></ClearAccountActionDefinitionForm>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>

                            <FormStep Title="Generische Zu- und Abflüsse"
                                      HelpText="Einmalige oder periodische Kapitalflüsse, die einer Steuer unterliegen. Mit einem Geldfluss sind immer zwei Konti verbunden.">
                                <h3>Vorsorge</h3>
                                <RadzenCard>
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <RadzenAccordion>
                                                    <Items>
                                                        @foreach (StaticGenericCashFlowDefinition definition in genericCashFlowDefinitions)
                                                        {
                                                        <RadzenAccordionItem Text="@definition.Header.Name">
                                                            <GenericCashFlowDefinitionForm Definition="definition" />
                                                        </RadzenAccordionItem>
                                                        }
                                                    </Items>

                                                </RadzenAccordion>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Simulation" Disabled="@(selectedPerson == null)">
                        <ChildContent>
                            <FormStep Title="Simulation" HelpText="Das Ergebnis einer Simulation lässt sich von weiteren Parametern steuern.">
                                <RadzenCard>
                                    <ChildContent>
                                        <div class="row">
                                            <RadzenFieldset Text="Simulation">
                                                <div class="row">
                                                    <div class="col-md-3"><RadzenLabel Text="Startjahr" /></div>
                                                    <div class="col-md-9"><RadzenNumeric TValue="int" @bind-Value="model.StartingYear" /></div>
                                                    <div class="col-md-3"><RadzenLabel Text="Anzahl Perioden" /></div>
                                                    <div class="col-md-9"><RadzenNumeric TValue="int" @bind-Value="model.NumberOfPeriods" /></div>
                                                </div>
                                            </RadzenFieldset>
                                        </div>


                                        <div class="row">
                                            <RadzenFieldset Text="Wertentwicklung">
                                                <div class="col-md-3"><RadzenLabel Text="Sparquote" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="P0" @bind-Value="simulationOptions.SavingsQuota" Min="0" Max="1" Step="0.01" /></div>
                                                <div class="col-md-3"><RadzenLabel Text="Lohnwachstum" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="P2" @bind-Value="simulationOptions.SalaryNetGrowthRate" Min="0" Max="0.5M" Step="0.01" /></div>
                                                <div class="col-md-3"><RadzenLabel Text="Vorsorgewachstum" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="P2" @bind-Value="simulationOptions.CapitalBenefitsNetGrowthRate" Min="0" Max="0.5M" Step="0.01" /></div>
                                                <div class="col-md-3"><RadzenLabel Text="Vermögenswachstum" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="P2" @bind-Value="simulationOptions.WealthNetGrowthRate" Min="0" Max="0.5M" Step="0.01" /></div>
                                            </RadzenFieldset>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 text-right">
                                                <MudButton ButtonType="MudBlazor.ButtonType.Submit" Text="Berechne"></MudButton>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                </Steps>
            </RadzenSteps>
        </ChildContent>
    </RadzenContent>
</RadzenTemplateForm>

@if (multiPeriodCalculationResponse != null)
{
    <RadzenPanel AllowCollapse="true">
        <div class="container">
        <div class="row">
            <div class="col-md-12">
                <RadzenChart>
                    <RadzenLineSeries Smooth="false"
                                      Data="@wealthDataItems"
                                      CategoryProperty="Date"
                                      Title="Steuerbares Vermögen"
                                      ValueProperty="Value"
                                      RenderingOrder="2">
                    </RadzenLineSeries>

                    <RadzenLineSeries Smooth="false"
                                      Data="@capitalBenefitsDataItems"
                                      CategoryProperty="Date"
                                      Title="Kapitalleistungen"
                                      ValueProperty="Value"
                                      RenderingOrder="1">
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="false"
                                      Data="@totalDataItems"
                                      CategoryProperty="Date"
                                      Title="Total"
                                      ValueProperty="Value"
                                      RenderingOrder="3">
                    </RadzenLineSeries>

                    <RadzenCategoryAxis Padding="20" FormatString="{0:yyyy}"/>
                    <RadzenValueAxis Min="0" Step="100000">
                        <RadzenGridLines Visible="true"/>
                        <RadzenAxisTitle Text="Gesamtvermögen"/>
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <label>Rohdaten</label>
                <RadzenTextArea Name="output" Rows="10" ReadOnly="true" Value="@(JsonSerializer.Serialize(multiPeriodCalculationResponse))" Style="width: 100%"/>
            </div>
        </div>
        </div>
    </RadzenPanel>
}

@code {

    class ChartDataItemModel
    {
        public DateTime Date { get; set; }
        public decimal Value { get; set; }
    }

    private readonly MultiPeriodRequest model = GetDefaultValues();
    private readonly ChangeResidenceAction changeResidenceModel = new()
    {
        Header = new CashFlowHeader
        {
            Id = "cra1",
                Name = "Change Residence Action"
        },
    };

    private IEnumerable<StaticGenericCashFlowDefinition> genericCashFlowDefinitions = new List<StaticGenericCashFlowDefinition>();
    private RelativeTransferAmountDefinition clearAccountAction = new();

    private TaxPerson taxPerson;
    private PersonViewModel selectedPerson;
    private IReadOnlyCollection<PersonViewModel> persons;
    private readonly MultiPeriodOptions simulationOptions = new();

    private MultiPeriodResponse multiPeriodCalculationResponse;
    private ChartDataItemModel[] capitalBenefitsDataItems = { };
    private ChartDataItemModel[] wealthDataItems = { };
    private ChartDataItemModel[] totalDataItems = { };
    private bool isChangeResidenceActive;
    private bool isClearActionActive;
    private DateTime? birthdate = new DateTime( 1900, 1, 1);
    private DateTime? dateOfProcessChangeResidence;
    private string newDomicileName = null;

    protected override async Task OnInitializedAsync()
    {
        persons = (await PersonService.GetPersonsAsync()).ToList();
        changeResidenceModel.DestinationMunicipalityId = model.BfsMunicipalityId;
        changeResidenceModel.DateOfProcess = new DateTime(Math.Max(model.StartingYear + model.NumberOfPeriods - 3, 0), 1, 1);
        genericCashFlowDefinitions = new List<StaticGenericCashFlowDefinition>
        {
            new()
            {
                Header = new CashFlowHeader
                {
                    Id = "my 3a account",
                    Name = "Säule 3a",
                },

                InitialAmount = 0,
                RecurringInvestment = new RecurringInvestment
                {
                    Amount = 6883,
                    Frequency = FrequencyType.Yearly,
                },
                Flow = new FlowPair(AccountType.Income, AccountType.ThirdPillar),
                InvestmentPeriod = new InvestmentPeriod
                {
                    Year = 2021,
                    NumberOfPeriods = 10,
                },
                IsTaxable = false,
                TaxType = TaxType.Undefined,
            },
            new()
            {
                Header = new CashFlowHeader
                {
                    Id = "purchase",
                    Name = "PK-Einkauf",
                },
                NetGrowthRate = 0,
                InitialAmount = 0,
                RecurringInvestment = new RecurringInvestment
                {
                    Amount = 10000,
                    Frequency = FrequencyType.Yearly,
                },
                Flow = new FlowPair(AccountType.Income, AccountType.OccupationalPension),
                InvestmentPeriod = new InvestmentPeriod
                {
                    Year = 2021,
                    NumberOfPeriods = 5,
                },
                IsTaxable = false,
                TaxType = TaxType.Undefined,
            }
        };

        clearAccountAction.DateOfProcess = new DateTime(Math.Max(model.StartingYear + model.NumberOfPeriods-1, 0));
    }

    private async Task OnSubmit(MultiPeriodRequest request)
    {
        multiPeriodCalculationResponse = null;
        request.Options = simulationOptions;
        request.CashFlowDefinitionHolder.StaticGenericCashFlowDefinitions = genericCashFlowDefinitions.ToList();
        request.CashFlowDefinitionHolder.Composites = new List<ICompositeCashFlowDefinition> { clearAccountAction };
        multiPeriodCalculationResponse = await MultiPeriodCalculationService.CalculateAsync(request);

        (ChartDataItemModel[] wealthData, ChartDataItemModel[] capitalBenefitsData, ChartDataItemModel[] totalData) = GetTotalDataItems();
        capitalBenefitsDataItems = capitalBenefitsData;
        wealthDataItems = wealthData;
        totalDataItems = totalData;
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Logger.LogInformation("InvalidSubmit");
    }

    private static MultiPeriodRequest GetDefaultValues()
    {
        return new MultiPeriodRequest
        {
            Name = "Unknown",
            NumberOfPeriods = 10,
            StartingYear = 2021,
        };
    }

    private (ChartDataItemModel[] wealthData, ChartDataItemModel[] capitalBenefitsData, ChartDataItemModel[] totalData) GetTotalDataItems()
    {
        ChartDataItemModel[] wealthData = GetWealthDataItems();
        ChartDataItemModel[] capitalBenefitsData = GetOccupationalPensionDataItems();
        ChartDataItemModel[] totalData = GetTotalSumDataItems();

        return (wealthData, capitalBenefitsData, totalData);
    }

    private ChartDataItemModel[] GetWealthDataItems()
    {
        if (multiPeriodCalculationResponse == null)
        {
            return Enumerable.Empty<ChartDataItemModel>().ToArray();
        }

        return multiPeriodCalculationResponse.Accounts
            .Where(item => item.AccountType == AccountType.Wealth)
            .Select(item => new ChartDataItemModel
            {
                Date = new DateTime(item.Year, 1, 1),
                Value = Math.Round(item.Amount)
            })
            .ToArray();
    }

    private ChartDataItemModel[] GetOccupationalPensionDataItems()
    {
        if (multiPeriodCalculationResponse == null)
        {
            return Enumerable.Empty<ChartDataItemModel>().ToArray();
        }

        return multiPeriodCalculationResponse.Accounts
            .Where(item => item.AccountType == AccountType.OccupationalPension)
            .Select(item => new ChartDataItemModel
            {
                Date = new DateTime(item.Year, 1, 1),
                Value = Math.Round(item.Amount)
            })
            .ToArray();
    }

    private ChartDataItemModel[] GetTotalSumDataItems()
    {
        if (multiPeriodCalculationResponse == null)
        {
            return Enumerable.Empty<ChartDataItemModel>().ToArray();
        }

        return multiPeriodCalculationResponse.Accounts
            .GroupBy(keySelector => keySelector.Year)
            .Select(g => new ChartDataItemModel
            {
                Date = new DateTime(g.Key, 1, 1),
                Value = g.Sum(item => Math.Round(item.Amount))
            })
            .ToArray();
    }

    private void HandleChangeResidence(TaxSupportedMunicipalityModel municipalityModel)
    {
        changeResidenceModel.DestinationMunicipalityId = municipalityModel.BfsMunicipalityNumber;
        changeResidenceModel.DestinationCanton = municipalityModel.Canton;
        newDomicileName = municipalityModel.Name;
    }

    private void HandleSelectPerson(Guid personId)
    {
        selectedPerson = persons.Single(item => item.Id == personId);
        taxPerson = new TaxPerson
            {
                Name = selectedPerson.Name,
                CivilStatus = selectedPerson.CivilStatus,
                TaxableIncome = selectedPerson.TaxableIncome,
                TaxableWealth = selectedPerson.TaxableWealth,
                PartnerReligiousGroupType = selectedPerson.PartnerReligiousGroupType,
                ReligiousGroupType = selectedPerson.ReligiousGroupType,
            };

        model.CivilStatus = selectedPerson.CivilStatus;
        model.ReligiousGroupType = selectedPerson.ReligiousGroupType;
        model.PartnerReligiousGroupType = selectedPerson.PartnerReligiousGroupType;
        model.Name = selectedPerson.Name;
        model.BfsMunicipalityId = selectedPerson.BfsMunicipalityId;
        model.Income = selectedPerson.TaxableIncome;
        model.Wealth = selectedPerson.TaxableWealth;

        birthdate = selectedPerson.DateOfBirth;
    }
}
