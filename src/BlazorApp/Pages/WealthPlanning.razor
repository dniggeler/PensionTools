@page "/WealthPlanning"
@using PensionCoach.Tools.CommonTypes
@using Microsoft.Extensions.Logging
@using System.Text.Json
@using BlazorApp.Services
@using PensionCoach.Tools.CommonTypes.MultiPeriod
@using PensionCoach.Tools.CommonTypes.Tax

@inject ILogger<WealthPlanning> logger
@inject IMultiPeriodCalculationService multiPeriodCalculationService
@inject IMunicipalityService municipalityService

<RadzenTemplateForm TItem="MultiPeriodRequest" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
    <RadzenContent Container="main">
        <ChildContent>
            <RadzenHeading Size="H1" Text="Finanzplanung">
            </RadzenHeading>
            <RadzenSteps NextText="Nächster" PreviousText="Vorheriger">
                <Steps>
                    <RadzenStepsItem Text="Steuerperson" Selected="true">
                        <ChildContent>
                            <FormStep 
                                Title="Person" 
                                HelpText="Steuerlich relevante Angaben zur Person sind der Zivilstand, die Konfession und, falls verheiratet, die Konfession der Partnerin.">
                                <RadzenCard>
                                <ChildContent>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h3>Name</h3>
                                            <RadzenTextBox Name="Name" @bind-Value="model.Name"></RadzenTextBox>
                                        </div>

                                        <div class="col-md-6">
                                            <h3>Zivilstand</h3>
                                            <RadzenRadioButtonList Name="CivilStatus"
                                                                   TValue="CivilStatus"
                                                                   Value=@(taxPerson.CivilStatus)
                                                                   Change=@(args => { taxPerson.CivilStatus = args; })>
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Ledig" Value="@CivilStatus.Single" />
                                                    <RadzenRadioButtonListItem Text="Verheiratet" Value="@CivilStatus.Married" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </div>

                                        <div class="col-md-12">
                                            <h3>Konfession</h3>
                                            <RadzenRadioButtonList Name="ReligousGroup"
                                                                   TValue="int"
                                                                   Value=@((int)taxPerson.ReligiousGroupType)
                                                                   Change=@(args => { taxPerson.ReligiousGroupType = (ReligiousGroupType)args; })>
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="andere" Value="0" />
                                                    <RadzenRadioButtonListItem Text="evangelisch" Value="1" />
                                                    <RadzenRadioButtonListItem Text="christ-katholisch" Value="2" />
                                                    <RadzenRadioButtonListItem Text="römisch-katholisch" Value="3" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </div>
                                        @if (taxPerson.CivilStatus == CivilStatus.Married)
                                        {
                                            <div class="col-md-12">
                                                <h3>Konfession Partner</h3>
                                                <RadzenRadioButtonList Name="ReligousGroupPartner"
                                                                       TValue="int"
                                                                       Change=@(args => { taxPerson.PartnerReligiousGroupType = (ReligiousGroupType)args; })
                                                                       Value=@((int)(taxPerson.PartnerReligiousGroupType ?? ReligiousGroupType.Other))>
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="andere" Value="0" />
                                                        <RadzenRadioButtonListItem Text="evangelisch" Value="1" />
                                                        <RadzenRadioButtonListItem Text="christ-katholisch" Value="2" />
                                                        <RadzenRadioButtonListItem Text="römisch-katholisch" Value="3" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </div>
                                        }
                                    </div>
                                </ChildContent>
                            </RadzenCard>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Steuerdaten">
                        <ChildContent>
                            <FormStep Title="Steuerdaten" HelpText="Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.">
                                <RadzenCard>
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <h3>Lohn</h3>
                                                <RadzenNumeric TValue="decimal" Format="n0" @bind-Value="model.Income"/>
                                            </div>
                                            <div class="col-md-4">
                                                <h3>Vermögen</h3>
                                                <RadzenNumeric TValue="decimal" Format="n0" @bind-Value="model.Wealth"/>
                                            </div>
                                            <div class="col-md-4">
                                                <MunicipalitySelector Title="Steuergemeinde" BfsMunicipalityId="model.BfsMunicipalityId" OnSelected="id => { model.BfsMunicipalityId = id; }"/>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Cash-Flow Actions">
                        <ChildContent>
                            <FormStep
                                Title="Wohnortwechsel"
                                HelpText="Ab einem gewünschten Jahr kann die Wohngemeinde geändert werden, was einen Einfluss auf alle Steuern hat, insbesondere wenn die neue Gemeinde in einem anderen Kanton liegt.">
                                <div class="row">
                                    <div class="col-md-12">
                                        <h3>Steuergemeinde wechseln</h3>
                                        <RadzenSwitch Value="isChangeResidenceActive" ValueChanged="() => isChangeResidenceActive = !isChangeResidenceActive"/>
                                    </div>
                                </div>

                                <RadzenCard Visible="isChangeResidenceActive">
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <h3>Wechsel im Jahr</h3>
                                                <RadzenNumeric TValue="int" @bind-Value="changeResidenceModel.ChangeAtYear" />
                                            </div>
                                            <div class="col-md-4">
                                                <h3>Wechselkosten</h3>
                                                <RadzenNumeric TValue="decimal" @bind-Value="changeResidenceModel.ChangeCost" />
                                            </div>
                                            <div class="col-md-4">
                                                <MunicipalitySelector Title="Neue Steuergemeinde"
                                                                      BfsMunicipalityId="changeResidenceModel.DestinationMunicipalityId"
                                                                      OnSelected="HandleChangeResidence" />
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>

                            <FormStep Title="Zu- und Abflüsse" HelpText="Einmalige oder periodische Kapitalflüsse, die einer Steuer unterliegen. Mit einem Geldfluss sind immer zwei Konti verbunden.">
                                <RadzenCard>
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <RadzenAccordion>
                                                    <Items>
                                                        @foreach (GenericCashFlowDefinition definition in genericCashFlowDefinitions)
                                                        {
                                                            <RadzenAccordionItem Text="@definition.Name">
                                                                <div class="row">
                                                                    <div class="col-md-4">
                                                                        <RadzenLabel Text="Titel" Component="name" />
                                                                        <RadzenTextBox TValue="string" @bind-Value="@definition.Name" Name="name" />
                                                                    </div>
                                                                    <div class="col-md-4">
                                                                        <RadzenLabel Text="Initialer Betrag" Component="initialAmount" />
                                                                        <RadzenNumeric TValue="decimal" @bind-Value="@definition.InitialAmount" Name="initialAmount" />
                                                                    </div>
                                                                    <div class="col-md-4">
                                                                        <RadzenLabel Text="Versteuern" Component="isTaxable" />
                                                                        <RadzenSwitch @bind-Value="@definition.IsTaxable" Name="isTaxable" />
                                                                    </div>
                                                                    <div class="col-md-4">
                                                                        <RadzenLabel Text="Versteuern" Component="isTaxable" />
                                                                        <RadzenSwitch @bind-Value="@definition.IsTaxable" Name="isTaxable" />
                                                                    </div>
                                                                </div>
                                                            </RadzenAccordionItem>
                                                        }
                                                    </Items>

                                                </RadzenAccordion>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Simulation">
                        <ChildContent>
                            <FormStep Title="Simulation" HelpText="Das Ergebnis einer Simulation lässt sich von weiteren Parametern steuern.">
                                <RadzenCard>
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <h3>Berechnungsjahr</h3>
                                                <RadzenNumeric TValue="int" @bind-Value="model.StartingYear"/>
                                            </div>
                                            <div class="col-md-4">
                                                <h3>Anzahl Perioden: @model.NumberOfPeriods</h3>
                                                <RadzenSlider TValue="int" @bind-Value="model.NumberOfPeriods" Min="1" Max="50"/>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <h3>Sparquote</h3>
                                                <RadzenNumeric TValue="decimal" Format="P0" @bind-Value="simulationOptions.SavingsQuota" Min="0" Max="1" Step="0.01"/>
                                            </div>
                                            <div class="col-md-4">
                                                <h3>Lohnwachstum</h3>
                                                <RadzenNumeric TValue="decimal" Format="P2" @bind-Value="simulationOptions.SalaryNetGrowthRate" Min="0" Max="0.5M" Step="0.01"/>
                                            </div>
                                            <div class="col-md-4">
                                                <h3>Vermögenswachstum</h3>
                                                <RadzenNumeric TValue="decimal" Format="P2" @bind-Value="simulationOptions.WealthNetGrowthRate" Min="0" Max="0.5M" Step="0.01"/>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 text-right">
                                                <RadzenButton ButtonType="ButtonType.Submit" Text="Berechne"></RadzenButton>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                </Steps>
            </RadzenSteps>
        </ChildContent>
    </RadzenContent>
</RadzenTemplateForm>

@if (multiPeriodCalculationResponse != null)
{
    <RadzenPanel AllowCollapse="true">
        <div class="container">
        <div class="row">
            <div class="col-md-12">
                <RadzenChart>
                    <RadzenAreaSeries Smooth="false"
                                      Data="@wealthDataItems"
                                      CategoryProperty="Date"
                                      Title="Steuerbares Vermögen"
                                      ValueProperty="Value"
                                      RenderingOrder="2">
                    </RadzenAreaSeries>

                    <RadzenAreaSeries Smooth="false"
                                      Data="@capitalBenefitsDataItems"
                                      CategoryProperty="Date"
                                      Title="Kapitalleistungen"
                                      ValueProperty="Value"
                                      RenderingOrder="1">
                    </RadzenAreaSeries>

                    <RadzenCategoryAxis Padding="20" FormatString="{0:yyyy}"/>
                    <RadzenValueAxis Min="0" Step="100000">
                        <RadzenGridLines Visible="true"/>
                        <RadzenAxisTitle Text="Gesamtvermögen"/>
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <label>Rohdaten</label>
                <RadzenTextArea Name="output" Rows="10" ReadOnly="true" Value="@Serialize(multiPeriodCalculationResponse)" Style="width: 100%"/>
            </div>
        </div>
        </div>
    </RadzenPanel>
}

@code {

    class ChartDataItemModel
    {
        public DateTime Date { get; set; }
        public decimal Value { get; set; }
    }

    private readonly MultiPeriodRequest model = GetDefaultValues();
    private readonly ChangeResidenceAction changeResidenceModel = new()
    {
        Id = "cra1",
        Name = "Change Residence Action",
    };

    private IEnumerable<GenericCashFlowDefinition> genericCashFlowDefinitions = new List<GenericCashFlowDefinition>();

    private readonly TaxPerson taxPerson = DefaultTaxPerson.GetDefaultValues();
    private readonly MultiPeriodOptions simulationOptions = new();

    private MultiPeriodResponse multiPeriodCalculationResponse;
    private ChartDataItemModel[] capitalBenefitsDataItems = { };
    private ChartDataItemModel[] wealthDataItems = { };
    private bool isChangeResidenceActive = false;

    protected override Task OnInitializedAsync()
    {
        changeResidenceModel.DestinationMunicipalityId = model.BfsMunicipalityId;
        changeResidenceModel.ChangeAtYear = Math.Max(model.StartingYear + model.NumberOfPeriods - 3, 0);
        genericCashFlowDefinitions = new List<GenericCashFlowDefinition>
        {
            new()
            {
                Id = "my 3a account",
                Name = "Säule 3a",
                InitialAmount = 6883,
                RecurringInvestment = new RecurringInvestment(6883, FrequencyType.Yearly),
                Flow = new FlowPair(AccountType.Income, AccountType.CapitalBenefits),
                InvestmentPeriod = new InvestmentPeriod(2021, 10),
                IsTaxable = false,
                TaxType = TaxType.Undefined,
                OccurrenceType = OccurrenceType.BeginOfPeriod
            },
            new()
            {
                NetGrowthRate = 0,
                Name = "PK-Einkauf",
                InitialAmount = 10000,
                RecurringInvestment = new RecurringInvestment(10000, FrequencyType.Yearly),
                Flow = new FlowPair(AccountType.Income, AccountType.CapitalBenefits),
                InvestmentPeriod = new InvestmentPeriod(2021, 5),
                IsTaxable = false,
                TaxType = TaxType.Undefined,
                OccurrenceType = OccurrenceType.BeginOfPeriod
            }
        };

        return Task.CompletedTask;
    }

    private async Task OnSubmit(MultiPeriodRequest request)
    {
        multiPeriodCalculationResponse = null;
        multiPeriodCalculationResponse = await multiPeriodCalculationService.CalculateAsync(request);

        capitalBenefitsDataItems = GetCapitalBenefitsDataItems();
        wealthDataItems = GetWealthDataItems();
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        logger.LogInformation("InvalidSubmit");
    }

    private static MultiPeriodRequest GetDefaultValues()
    {
        return new MultiPeriodRequest
        {
            Name = "Toni",
            CivilStatus = CivilStatus.Single,
            ReligiousGroupType = ReligiousGroupType.Protestant,
            PartnerReligiousGroupType = null,
            Income = 100_000,
            Wealth = 500_000,
            BfsMunicipalityId = 139,
            NumberOfPeriods = 10,
            StartingYear = 2021,
        };
    }

    private string Serialize(MultiPeriodResponse response)
    {
        return JsonSerializer.Serialize(response);
    }

    private ChartDataItemModel[] GetWealthDataItems()
    {
        if (multiPeriodCalculationResponse == null)
        {
            return Enumerable.Empty<ChartDataItemModel>().ToArray();
        }

        return multiPeriodCalculationResponse.Accounts
            .Where(item => item.AccountType == AccountType.Wealth)
            .Select(item => new ChartDataItemModel
            {
                Date = new DateTime(item.Year, 1, 1),
                Value = Math.Round(item.Amount)
            })
            .ToArray();
    }

    private ChartDataItemModel[] GetCapitalBenefitsDataItems()
    {
        if (multiPeriodCalculationResponse == null)
        {
            return Enumerable.Empty<ChartDataItemModel>().ToArray();
        }

        return multiPeriodCalculationResponse.Accounts
            .GroupBy(keySelector => keySelector.Year)
            .Select(g => new ChartDataItemModel
            {
                Date = new DateTime(g.Key, 1, 1),
                Value = g.Sum(item => Math.Round(item.Amount))
            })
            .ToArray();
    }

    private void HandleChangeResidence(int id)
    {
        changeResidenceModel.DestinationMunicipalityId = id;
    }
}
