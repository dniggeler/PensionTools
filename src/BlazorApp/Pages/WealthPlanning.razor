@page "/WealthPlanning"
@using PensionCoach.Tools.CommonTypes
@using Microsoft.Extensions.Logging
@using System.Text.Json
@using BlazorApp.Services
@using PensionCoach.Tools.CommonTypes.MultiPeriod
@using PensionCoach.Tools.CommonTypes.Tax

@inject ILogger<WealthPlanning> logger
@inject IMultiPeriodCalculationService multiPeriodCalculationService
@inject IMunicipalityService municipalityService

<RadzenTemplateForm TItem="MultiPeriodRequest" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
    <RadzenContent Container="main">
        <ChildContent>
            <RadzenHeading Size="H1" Text="Finanzplanung">
            </RadzenHeading>
            <RadzenSteps NextText="Nächster" PreviousText="Vorheriger">
                <Steps>
                    <RadzenStepsItem Text="Person" Selected="true">
                        <ChildContent>
                            <FormStep Title="Person"
                                      HelpText="Steuerlich relevante Angaben zur Person sind der Zivilstand, die Konfession und, falls verheiratet, die Konfession der Partnerin. Daneben gibt es auch Angaben wie das Alter, welche zwar für die Berechnung der Steuern irrelevant sind, aber Geldflüsse in der Vorsorge wirken.">
                                <ChildContent>
                                    <div class="row">
                                        <RadzenFieldset Text="Steuerperson">
                                            <div class="row">
                                                <div class="col-md-3"><RadzenLabel Text="Name" /></div>
                                                <div class="col-md-9"><RadzenTextBox @bind-Value="model.Name" Name="simulationName" /></div>

                                                <div class="col-md-3"><RadzenLabel Text="Zivilstand" /></div>
                                                <div class="col-md-9">
                                                    <RadzenRadioButtonList Name="civilStatus"
                                                                           TValue="CivilStatus"
                                                                           Value=@(taxPerson.CivilStatus)
                                                                           Change=@(args => { taxPerson.CivilStatus = args; })>
                                                        <Items>
                                                            <RadzenRadioButtonListItem Text="Ledig" Value="@CivilStatus.Single" />
                                                            <RadzenRadioButtonListItem Text="Verheiratet" Value="@CivilStatus.Married" />
                                                        </Items>
                                                    </RadzenRadioButtonList>
                                                </div>

                                                <div class="col-md-3"><RadzenLabel Text="Konfession" /></div>
                                                <div class="col-md-9">
                                                    <RadzenRadioButtonList Name="religousGroup"
                                                                           TValue="int"
                                                                           Value=@((int)taxPerson.ReligiousGroupType)
                                                                           Change=@(args => { taxPerson.ReligiousGroupType = (ReligiousGroupType)args; })>
                                                        <Items>
                                                            <RadzenRadioButtonListItem Text="andere" Value="0" />
                                                            <RadzenRadioButtonListItem Text="evangelisch" Value="1" />
                                                            <RadzenRadioButtonListItem Text="christ-katholisch" Value="2" />
                                                            <RadzenRadioButtonListItem Text="römisch-katholisch" Value="3" />
                                                        </Items>
                                                    </RadzenRadioButtonList>
                                                </div>
                                                @if (taxPerson.CivilStatus == CivilStatus.Married)
                                            {
                                                <div class="col-md-3"><RadzenLabel Text="Partner" /></div>
                                                <div class="col-md-9">
                                                    <RadzenRadioButtonList Name="religousGroupPartner"
                                                                           TValue="int"
                                                                           Change=@(args => { taxPerson.PartnerReligiousGroupType = (ReligiousGroupType)args; })
                                                                           Value=@((int)(taxPerson.PartnerReligiousGroupType ?? ReligiousGroupType.Other))>
                                                        <Items>
                                                            <RadzenRadioButtonListItem Text="andere" Value="0" />
                                                            <RadzenRadioButtonListItem Text="evangelisch" Value="1" />
                                                            <RadzenRadioButtonListItem Text="christ-katholisch" Value="2" />
                                                            <RadzenRadioButtonListItem Text="römisch-katholisch" Value="3" />
                                                        </Items>
                                                    </RadzenRadioButtonList>
                                                </div>
                                            }
                                            </div>

                                        </RadzenFieldset>
                                    </div>
                                    <div class="row">
                                        <RadzenFieldset Text="Vorsorge">
                                            <div class="col-md-3"><RadzenLabel Text="Geburtstag" /></div>
                                            <div class="col-md-9"><RadzenDatePicker @bind-Value="model.Name" ShowTime="false" /></div>

                                        </RadzenFieldset>
                                    </div>
                                </ChildContent>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Steuerdaten">
                        <ChildContent>
                            <FormStep Title="Steuerdaten" HelpText="Der aktuelle Lohn und das derzeitige Vermögen sind der Startpunkt für Vermögensentwicklung über die Zeit.">
                                <ChildContent>

                                    <RadzenFieldset Text="Steuerdaten">
                                        <div class="row">
                                            <div class="col-md-3"><RadzenLabel Text="Lohn" /></div>
                                            <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="n0" @bind-Value="model.Income" /></div>

                                            <div class="col-md-3"><RadzenLabel Text="Vermögen" /></div>
                                            <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="n0" @bind-Value="model.Wealth" /></div>
                                            <div class="col-md-3"><RadzenLabel Text="Steuergemeinde" /></div>
                                            <div class="col-md-9">
                                                <MunicipalitySelector BfsMunicipalityId="model.BfsMunicipalityId" OnSelected="id => { model.BfsMunicipalityId = id; }" />
                                            </div>
                                        </div>
                                    </RadzenFieldset>

                                    </ChildContent>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Cash-Flow Actions">
                        <ChildContent>
                            <FormStep
                                Title="Wohnortwechsel"
                                HelpText="Ab einem gewünschten Jahr kann die Wohngemeinde geändert werden, was einen Einfluss auf alle Steuern hat, insbesondere wenn die neue Gemeinde in einem anderen Kanton liegt.">
                                <div class="row">
                                    <div class="col-md-12">
                                        <h3>Steuergemeinde wechseln</h3>
                                        <RadzenSwitch Value="isChangeResidenceActive" ValueChanged="() => isChangeResidenceActive = !isChangeResidenceActive"/>
                                    </div>
                                </div>

                                <RadzenCard Visible="isChangeResidenceActive">
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-3"><RadzenLabel Text="Jahr" /></div>
                                            <div class="col-md-9"><RadzenNumeric TValue="int" @bind-Value="changeResidenceModel.ChangeAtYear" /></div>
                                            <div class="col-md-3"><RadzenLabel Text="Kosten" /></div>
                                            <div class="col-md-9"><RadzenNumeric TValue="decimal" @bind-Value="changeResidenceModel.ChangeCost" /></div>
                                            <div class="col-md-3"><RadzenLabel Text="Gemeinde" /></div>
                                            <div class="col-md-9"><MunicipalitySelector BfsMunicipalityId="changeResidenceModel.DestinationMunicipalityId" OnSelected="HandleChangeResidence" /></div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>

                            <FormStep Title="Zu- und Abflüsse"
                                      HelpText="Einmalige oder periodische Kapitalflüsse, die einer Steuer unterliegen. Mit einem Geldfluss sind immer zwei Konti verbunden.">
                                <h3>Vorsorge</h3>
                                <RadzenCard>
                                    <ChildContent>
                                        <div class="row">
                                            <div class="col-md-12">
                                                <RadzenAccordion>
                                                    <Items>
                                                        @foreach (GenericCashFlowDefinition definition in genericCashFlowDefinitions)
                                                        {
                                                        <RadzenAccordionItem Text="@definition.Name">
                                                            <GenericCashFlowDefinitionForm Definition="definition" />
                                                        </RadzenAccordionItem>
                                                        }
                                                    </Items>

                                                </RadzenAccordion>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                    <RadzenStepsItem Text="Simulation">
                        <ChildContent>
                            <FormStep Title="Simulation" HelpText="Das Ergebnis einer Simulation lässt sich von weiteren Parametern steuern.">
                                <RadzenCard>
                                    <ChildContent>
                                        <div class="row">
                                            <RadzenFieldset Text="Simulation">
                                                <div class="row">
                                                    <div class="col-md-3"><RadzenLabel Text="Startjahr" /></div>
                                                    <div class="col-md-9"><RadzenNumeric TValue="int" @bind-Value="model.StartingYear" /></div>
                                                    <div class="col-md-3"><RadzenLabel Text="Anzahl Perioden" /></div>
                                                    <div class="col-md-9"><RadzenNumeric TValue="int" @bind-Value="model.NumberOfPeriods" /></div>
                                                </div>
                                            </RadzenFieldset>
                                        </div>


                                        <div class="row">
                                            <RadzenFieldset Text="Wertentwicklung">
                                                <div class="col-md-3"><RadzenLabel Text="Sparquote" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="P0" @bind-Value="simulationOptions.SavingsQuota" Min="0" Max="1" Step="0.01" /></div>
                                                <div class="col-md-3"><RadzenLabel Text="Lohnwachstum" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="P2" @bind-Value="simulationOptions.SalaryNetGrowthRate" Min="0" Max="0.5M" Step="0.01" /></div>
                                                <div class="col-md-3"><RadzenLabel Text="Vorsorgewachstum" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="P2" @bind-Value="simulationOptions.CapitalBenefitsNetGrowthRate" Min="0" Max="0.5M" Step="0.01" /></div>
                                                <div class="col-md-3"><RadzenLabel Text="Vermögenswachstum" /></div>
                                                <div class="col-md-9"><RadzenNumeric TValue="decimal" Format="P2" @bind-Value="simulationOptions.WealthNetGrowthRate" Min="0" Max="0.5M" Step="0.01" /></div>
                                            </RadzenFieldset>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 text-right">
                                                <RadzenButton ButtonType="ButtonType.Submit" Text="Berechne"></RadzenButton>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RadzenCard>
                            </FormStep>
                        </ChildContent>
                    </RadzenStepsItem>
                </Steps>
            </RadzenSteps>
        </ChildContent>
    </RadzenContent>
</RadzenTemplateForm>

@if (multiPeriodCalculationResponse != null)
{
    <RadzenPanel AllowCollapse="true">
        <div class="container">
        <div class="row">
            <div class="col-md-12">
                <RadzenChart>
                    <RadzenLineSeries Smooth="false"
                                      Data="@wealthDataItems"
                                      CategoryProperty="Date"
                                      Title="Steuerbares Vermögen"
                                      ValueProperty="Value"
                                      RenderingOrder="2">
                    </RadzenLineSeries>

                    <RadzenLineSeries Smooth="false"
                                      Data="@capitalBenefitsDataItems"
                                      CategoryProperty="Date"
                                      Title="Kapitalleistungen"
                                      ValueProperty="Value"
                                      RenderingOrder="1">
                    </RadzenLineSeries>
                    
                    <RadzenLineSeries Smooth="false"
                                      Data="@totalDataItems"
                                      CategoryProperty="Date"
                                      Title="Total"
                                      ValueProperty="Value"
                                      RenderingOrder="3">
                    </RadzenLineSeries>

                    <RadzenCategoryAxis Padding="20" FormatString="{0:yyyy}"/>
                    <RadzenValueAxis Min="0" Step="100000">
                        <RadzenGridLines Visible="true"/>
                        <RadzenAxisTitle Text="Gesamtvermögen"/>
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <label>Rohdaten</label>
                <RadzenTextArea Name="output" Rows="10" ReadOnly="true" Value="@Serialize(multiPeriodCalculationResponse)" Style="width: 100%"/>
            </div>
        </div>
        </div>
    </RadzenPanel>
}

@code {

    class ChartDataItemModel
    {
        public DateTime Date { get; set; }
        public decimal Value { get; set; }
    }

    private readonly MultiPeriodRequest model = GetDefaultValues();
    private readonly ChangeResidenceAction changeResidenceModel = new()
    {
        Id = "cra1",
        Name = "Change Residence Action",
    };

    private IEnumerable<GenericCashFlowDefinition> genericCashFlowDefinitions = new List<GenericCashFlowDefinition>();

    private readonly TaxPerson taxPerson = DefaultTaxPerson.GetDefaultValues();
    private readonly MultiPeriodOptions simulationOptions = new();

    private MultiPeriodResponse multiPeriodCalculationResponse;
    private ChartDataItemModel[] capitalBenefitsDataItems = { };
    private ChartDataItemModel[] wealthDataItems = { };
    private ChartDataItemModel[] totalDataItems = { };
    private bool isChangeResidenceActive = false;

    protected override Task OnInitializedAsync()
    {
        changeResidenceModel.DestinationMunicipalityId = model.BfsMunicipalityId;
        changeResidenceModel.ChangeAtYear = Math.Max(model.StartingYear + model.NumberOfPeriods - 3, 0);
        genericCashFlowDefinitions = new List<GenericCashFlowDefinition>
        {
            new()
            {
                Id = "my 3a account",
                Name = "Säule 3a",
                InitialAmount = 0,
                RecurringInvestment = new RecurringInvestment
                {
                    Amount = 6883,
                    Frequency = FrequencyType.Yearly,
                },
                Flow = new FlowPair(AccountType.Income, AccountType.CapitalBenefits),
                InvestmentPeriod = new InvestmentPeriod
                {
                    Year = 2021,
                    NumberOfPeriods = 10,
                },
                IsTaxable = false,
                TaxType = TaxType.Undefined,
                OccurrenceType = OccurrenceType.BeginOfPeriod
            },
            new()
            {
                NetGrowthRate = 0,
                Name = "PK-Einkauf",
                InitialAmount = 0,
                RecurringInvestment = new RecurringInvestment
                {
                    Amount = 10000,
                    Frequency = FrequencyType.Yearly,
                },
                Flow = new FlowPair(AccountType.Income, AccountType.CapitalBenefits),
                InvestmentPeriod = new InvestmentPeriod
                {
                    Year = 2021,
                    NumberOfPeriods = 5,
                },
                IsTaxable = false,
                TaxType = TaxType.Undefined,
                OccurrenceType = OccurrenceType.BeginOfPeriod
            }
        };

        return Task.CompletedTask;
    }

    private async Task OnSubmit(MultiPeriodRequest request)
    {
        multiPeriodCalculationResponse = null;
        request.Options = simulationOptions;
        request.CashFlowDefinitionHolder.GenericCashFlowDefinitions = genericCashFlowDefinitions.ToList();
        multiPeriodCalculationResponse = await multiPeriodCalculationService.CalculateAsync(request);

        (ChartDataItemModel[] wealthData, ChartDataItemModel[] capitalBenefitsData, ChartDataItemModel[] totalData) = GetTotalDataItems();
        capitalBenefitsDataItems = capitalBenefitsData;
        wealthDataItems = wealthData;
        totalDataItems = totalData;
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        logger.LogInformation("InvalidSubmit");
    }

    private static MultiPeriodRequest GetDefaultValues()
    {
        return new MultiPeriodRequest
        {
            Name = "Toni",
            CivilStatus = CivilStatus.Single,
            ReligiousGroupType = ReligiousGroupType.Protestant,
            PartnerReligiousGroupType = null,
            Income = 100_000,
            Wealth = 500_000,
            BfsMunicipalityId = 139,
            NumberOfPeriods = 10,
            StartingYear = 2021,
        };
    }

    private string Serialize(MultiPeriodResponse response)
    {
        return JsonSerializer.Serialize(response);
    }

    private (ChartDataItemModel[] wealthData, ChartDataItemModel[] capitalBenefitsData, ChartDataItemModel[] totalData) GetTotalDataItems()
    {
        ChartDataItemModel[] wealthData = GetWealthDataItems();
        ChartDataItemModel[] capitalBenefitsData = GetCapitalBenefitsDataItems();
        ChartDataItemModel[] totalData = GetTotalSumDataItems();

        return (wealthData, capitalBenefitsData, totalData);
    }

    private ChartDataItemModel[] GetWealthDataItems()
    {
        if (multiPeriodCalculationResponse == null)
        {
            return Enumerable.Empty<ChartDataItemModel>().ToArray();
        }

        return multiPeriodCalculationResponse.Accounts
            .Where(item => item.AccountType == AccountType.Wealth)
            .Select(item => new ChartDataItemModel
            {
                Date = new DateTime(item.Year, 1, 1),
                Value = Math.Round(item.Amount)
            })
            .ToArray();
    }

    private ChartDataItemModel[] GetCapitalBenefitsDataItems()
    {
        if (multiPeriodCalculationResponse == null)
        {
            return Enumerable.Empty<ChartDataItemModel>().ToArray();
        }

        return multiPeriodCalculationResponse.Accounts
            .Where(item => item.AccountType == AccountType.CapitalBenefits)
            .Select(item => new ChartDataItemModel
            {
                Date = new DateTime(item.Year, 1, 1),
                Value = Math.Round(item.Amount)
            })
            .ToArray();
    }

    private ChartDataItemModel[] GetTotalSumDataItems()
    {
        if (multiPeriodCalculationResponse == null)
        {
            return Enumerable.Empty<ChartDataItemModel>().ToArray();
        }

        return multiPeriodCalculationResponse.Accounts
            .GroupBy(keySelector => keySelector.Year)
            .Select(g => new ChartDataItemModel
            {
                Date = new DateTime(g.Key, 1, 1),
                Value = g.Sum(item => Math.Round(item.Amount))
            })
            .ToArray();
    }

    private void HandleChangeResidence(int id)
    {
        changeResidenceModel.DestinationMunicipalityId = id;
    }
}
