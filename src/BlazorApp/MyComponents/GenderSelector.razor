@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using PensionCoach.Tools.CommonTypes
@using Domain.Enums

@inject IStringLocalizer<PensionComponents> Localizer


@if (IsReadOnly)
{
    @if (DisplayInGrid)
    {
       <MudText>@GetViewModel().Name</MudText>
    }
    else
    {
        <MudTextField T="string" Label="@Label" Text="@GetViewModel().Name" ReadOnly="@IsReadOnly"/>
    }
}
else
{
    <MudSelect T="Gender" ReadOnly="@IsReadOnly" Label="@Label" ValueChanged="HandleChange" Value="@SelectedGender">

        @foreach (var g in genderModels)
        {
            <MudSelectItem Value="g.Value">@g.Name</MudSelectItem>
        }
    </MudSelect>
}

@code {
    internal class GenderViewModel
    {
        public Gender Value { get; set; }

        public string Name { get; set;}
    }

    [Parameter] public string Label { get; set; }
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public bool DisplayInGrid { get; set; }

    [Parameter]
    public Gender SelectedGender { get; set; } = Gender.Undefined;

    [Parameter]
    public EventCallback<Gender> OnSelected { get; set; }

    private readonly List<GenderViewModel> genderModels = new();

    protected override void OnInitialized()
    {
        genderModels.Add(new GenderViewModel { Name = Localizer["gender.male"], Value = Gender.Male });
        genderModels.Add(new GenderViewModel { Name = Localizer["gender.female"], Value = Gender.Female });
    }

    private async Task HandleChange(Gender value)
    {
        SelectedGender = value;
        await OnSelected.InvokeAsync(value);
    }

    private GenderViewModel GetViewModel()
    {
        return genderModels.Single(item => item.Value == SelectedGender);
    }
}
