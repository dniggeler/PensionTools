@using BlazorApp.Services
@using PensionCoach.Tools.CommonTypes
@using PensionCoach.Tools.CommonTypes.Tax
@using Radzen
@using Radzen.Blazor

@inject IMunicipalityService MunicipalityService

<MudGrid>
    <MudItem md="6">
        <MudSelect Label="Kanton" Disabled="@IsReadOnly" @bind-Value="@CantonCode">
            @foreach (var m in cantons)
            {
                <MudSelectItem Value="m.Canton" OnClick="HandleCantonChangeAsync">@m.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    
    <MudItem md="6">
        <MudSelect Label="Wohnort" Disabled="@IsReadOnly" @bind-Value="@BfsMunicipalityId">
            @foreach (var m in municipalities)
            {
                <MudSelectItem Value="m.BfsMunicipalityNumber">@m.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

@code {
    internal record CantonHolder
    {
        public Canton Canton { get; init; }
        public string Name { get; init; }
    }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int BfsMunicipalityId { get; set; }

    [Parameter]
    public Canton CantonCode { get; set; }

    [Parameter]
    public EventCallback<TaxSupportedMunicipalityModel> OnSelected { get; set; }

    private IReadOnlyCollection<TaxSupportedMunicipalityModel> municipalities = new List<TaxSupportedMunicipalityModel>();
    private IReadOnlyCollection<CantonHolder> cantons = new List<CantonHolder>();

    protected override async Task OnInitializedAsync()
    {
        cantons = Enum.GetValues(typeof(Canton)).Cast<Canton>().Select(c => new CantonHolder{ Canton = c, Name = c.ToString()}).ToList();
        municipalities = (await MunicipalityService.GetTaxSupportingAsync())
            .Where(m => m.Canton == CantonCode)
            .ToList();
    }

    private async Task HandleChangeAsync(object value)
    {
        BfsMunicipalityId = (int)value;

        TaxSupportedMunicipalityModel selectedMunicipalityModel =
            municipalities.Single(item => item.BfsMunicipalityNumber == BfsMunicipalityId);

        await OnSelected.InvokeAsync(selectedMunicipalityModel);
    }

    private async Task HandleCantonChangeAsync(object value)
    {
        CantonCode = (Canton)value;

        municipalities = (await MunicipalityService.GetTaxSupportingAsync())
            .Where(m => m.Canton == CantonCode)
            .ToList();

        if (municipalities.Count > 0)
        {
            TaxSupportedMunicipalityModel selectedMunicipalityModel = municipalities.First();
            BfsMunicipalityId = selectedMunicipalityModel.BfsMunicipalityNumber;

            await OnSelected.InvokeAsync(selectedMunicipalityModel);
        }
    }
}
