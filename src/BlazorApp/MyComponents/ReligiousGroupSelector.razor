@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using PensionCoach.Tools.CommonTypes
@using Domain.Enums

@inject IStringLocalizer<Resource> Localizer

<MudSelect Label="@Label" ReadOnly="@IsReadOnly" T="ReligiousGroupType" Value="@(SelectedReligiousGroupType ?? ReligiousGroupType.Other)" ValueChanged="HandleChangeAsync">
    @foreach (var g in religiousGroupTypes)
    {
        <MudSelectItem Value="g.Value">@g.Name</MudSelectItem>
    }
</MudSelect>

@code {

    internal class ReligiousGroupTypeViewModel
    {
        public ReligiousGroupType Value { get; set; }

        public string Name { get; set;}
    }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public ReligiousGroupType? SelectedReligiousGroupType { get; set; }

    [Parameter]
    public EventCallback<ReligiousGroupType?> OnSelected { get; set; }

    private readonly List<ReligiousGroupTypeViewModel> religiousGroupTypes = new();

    protected override void OnInitialized()
    {
        religiousGroupTypes.Add(new ReligiousGroupTypeViewModel { Name = "andere", Value = ReligiousGroupType.Other });
        religiousGroupTypes.Add(new ReligiousGroupTypeViewModel { Name = "evangelisch", Value = ReligiousGroupType.Protestant });
        religiousGroupTypes.Add(new ReligiousGroupTypeViewModel { Name = "christ-katholisch", Value = ReligiousGroupType.Catholic });
        religiousGroupTypes.Add(new ReligiousGroupTypeViewModel { Name = "römisch-katholisch", Value = ReligiousGroupType.Roman });
    }

    private async Task HandleChangeAsync(ReligiousGroupType value)
    {
        SelectedReligiousGroupType = value;

        await OnSelected.InvokeAsync(SelectedReligiousGroupType);
    }
}
