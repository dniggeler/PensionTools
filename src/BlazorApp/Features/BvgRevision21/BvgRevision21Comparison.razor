@page "/SocialSecurity/BvgRevision21Comparison"

@using Application.Bvg
@using BlazorApp.Features.BvgRevision21.Models
@using Domain.Models.Bvg
@using LanguageExt
@using Microsoft.Extensions.Logging

@inject ILogger<BvgRevision21Comparison> Logger
@inject IPersonService PersonService
@inject IBvgCalculator BvgCalculator

<MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
    <MudGrid>
        <MudItem md="12">
            <MudText Typo="Typo.h5">Vergleich mit BVG Reform 21</MudText>
        </MudItem>

        <MudItem md="12">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

                <MudTabPanel Text="Person">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Die BVG-Reform 21 zielt darauf ab, die Finanzierung der 2. Säule zu stärken,
                                das Leistungsniveau insgesamt zu erhalten und die Absicherung von Teilzeitbeschäftigten – insbesondere von Frauen
                                – zu verbessern. Sie umfasst Massnahmen wie die Senkung des Umwandlungssatzes und die Verstärkung des Sparprozesses.
                            </MudText>
                            <br/>
                            <MudLink Href="https://www.bsv.admin.ch/bsv/de/home/sozialversicherungen/bv/reformen-und-revisionen.html" Target="_blank">Link zur offiziellen Dokumentation</MudLink>
                        </MudItem>
                        <MudItem md="8">
                            <PersonSelector Persons="@persons" OnSelect="@HandleSelectPerson"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="BVG Grunddaten" Disabled="@(selectedPerson is null)">
                    <MudGrid>
                        <MudItem md="4">
                            <MudText Typo="Typo.body2">
                                Neben Angaben zur Person wie Geschlecht und Geburtsdatum, braucht es zusätzliche Werte aus dem Vorsorgeausweis,
                                um die voraussichtlichen BVG-Altersleistungen (wie Alters-, Invaliden- und Partnerrente und das Altersguthaben zum Zeitpunkt der Pensionierung) zu berechnen:
                                - AHV-Jahreslohn
                                - das aktuelle Altersguthaben
                                - das voraussichtliche Altersguthaben der eigenen Pensionskasse
                            </MudText>
                        </MudItem>
                        <MudItem md="8">
                            <BvgPersonDetails Person="@selectedPerson"/>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
        <MudItem md="12">
            <MudButton OnClick="OnSubmit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(selectedPerson == null)">Berechne</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (bvgResult != null)
{
    <MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
        <MudGrid>
            <MudItem md="12">
                <MudText Typo="Typo.h5">Resultat</MudText>
            </MudItem>
            <MudItem md="12">
                <MudText Typo="Typo.body2">@bvgResult.FinalRetirementCapital</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {
    private BvgPersonViewModel selectedPerson;
    private IReadOnlyCollection<PersonViewModel> persons;
    private BvgCalculationResult bvgResult;

    protected override async Task OnInitializedAsync()
    {
        persons = (await PersonService.GetPersonsAsync()).ToList();
    }

    private async Task OnSubmit()
    {
        DateTime endOfYear = new DateTime(DateTime.Now.Year, 12, 31).AddDays(1);

        BvgPerson bvgPerson = new()
        {
            DateOfBirth = selectedPerson.DateOfBirth ?? DateTime.MaxValue,
            Gender = selectedPerson.Gender,
            ReportedSalary = 100000,
            PartTimeDegree = decimal.One
        };

        PredecessorRetirementCapital predecessorRetirementCapital = new PredecessorRetirementCapital()
        {
            BeginOfYearAmount = selectedPerson.BvgRetirementCapitalEndOfYear,
            CurrentAmount = selectedPerson.BvgRetirementCapitalEndOfYear,
            EndOfYearAmount = selectedPerson.BvgRetirementCapitalEndOfYear,
            DateOfProcess = endOfYear
        };

        Either<string, BvgCalculationResult> result = await BvgCalculator.CalculateAsync(predecessorRetirementCapital, endOfYear, bvgPerson);

        bvgResult = result.Match(
            Right: r => r,
            Left: e =>
            {
                Logger.LogWarning($"Error: {e}");

                return null;
            });
    }

    private void HandleSelectPerson(Guid personId)
    {
        selectedPerson = persons.Where(item => item.Id == personId)
            .Select(p => new BvgPersonViewModel
            {
                Name = p.   Name,
                DateOfBirth = p.DateOfBirth,
                Gender = p.Gender,
                FinalRetirementCapital = p.FinalRetirementCapital
            })
            .Single();
    }
}