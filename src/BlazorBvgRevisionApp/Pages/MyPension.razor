@page "/MeineVorsorge"

@using System.Text.Json
@using Application.Bvg
@using BlazorBvgRevisionApp.MyComponents.Models
@using Domain.Enums
@using Domain.Models.Bvg
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting

@inject IWebAssemblyHostEnvironment EnvironmentService
@inject BvgRevisionCalculator BvgRevisionCalculator
@inject BvgCalculator BvgCalculator
@inject IPensionSupplementCalculator BvgPensionSupplementCalculator
@inject ILogger<MyPension> Logger

<PageTitle>Meine Vorsorge</PageTitle>

<MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
    <MudText Class="mb-4" Typo="Typo.h4">Vergleich Ihrer Vorsorge</MudText>
    <MudText Class="mb-4" Typo="Typo.body2">
        Die Höhe Deines angesparten Guthabens und der daraus resultierenden Rente wird durch verschiedene Faktoren bestimmt.
        Zum Vergleich mit der BVG Reform 21 ist es zudem notwendig, das reglementarische Altersguthaben zum Rentenbeginn zu berücksichtigen,
        denn davon hängt die Höhe des Rentenzuschlags ab.
    </MudText>

    <MudText Class="mb-4" Typo="Typo.body2">
        Alle diese Werte sind auf Ihrem Vorsorgeausweis, den Sie mindestens einmal jährlich erhalten, aufgeführt.
    </MudText>

    <BvgPersonForm Person="@Person"></BvgPersonForm>

    <MudGrid>
        <MudItem md="12">
            <MudButton OnClick="OnBvgCalculate" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(IsPersonNotValid())">Berechne</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if(RevisionCalculationResult is not null)
{
    <MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
        <MudText Class="mb-4" Typo="Typo.h5">BVG Berechnungsergebnis</MudText>
        <MudText Typo="Typo.body2">Das Ergebnis der Berechnung zeigt Ihre voraussichtlichen BVG-Altersleistungen. Die Leistungen sind auf Ihren ordentlichen Rentenbeginn gerechnet.</MudText>

        <MudText Typo="Typo.body1" Class="mt-4">Ihr Pensionierungsdatum: @RevisionCalculationResult.DateOfRetirement.ToString("d. MMMM, yyyy")</MudText>

        <MudTable Items="@(ResultItems)" Class="mt-4" Dense="true">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh Style="text-align:right">mit Reform</MudTh>
                <MudTh Style="text-align:right">ohne Reform</MudTh>
                <MudTh Style="text-align:right">&#916;</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd><strong>@context.Benefit</strong></MudTd>
                <MudTd Style="text-align:right">@context.ValueBvgRevision</MudTd>
                <MudTd Style="text-align:right">@context.ValueCurrentBvg</MudTd>
                <MudTd Style="text-align:right">@($"{context.Difference:+0;-0;0}")</MudTd>
            </RowTemplate>
            </MudTable>
    </MudPaper>
}

@code
{
    internal record TableResult(string Benefit, decimal ValueCurrentBvg, decimal? ValueBvgRevision)
    {
        public decimal? Difference => ValueBvgRevision.HasValue ? Math.Round(ValueBvgRevision.Value - ValueCurrentBvg) : null;
    }

    private BvgPersonViewModel Person { get; set; } = new ();
    private BvgCalculationResult? RevisionCalculationResult { get; set; }
    private BvgCalculationResult? CurrentCalculationResult { get; set; }

    protected override void OnInitialized()
    {
        if (EnvironmentService.IsDevelopment())
        {
            Person = GetTestPerson();
        }
    }

    private BvgPersonViewModel GetTestPerson()
    {
        return new BvgPersonViewModel
        {
            Name = "Toni Vorsorger",
            DateOfBirth = new DateTime(1969, 3, 17),
            ReportedSalary = 100_000,
            BvgRetirementCapitalEndOfYear = 11245,
            FinalRetirementCapital = 250_000,
            Gender = Gender.Male,
        };
    }

    private void OnBvgCalculate(MouseEventArgs obj)
    {
        int calculationYear = DateTime.Now.Year;
        BvgPerson bvgPerson = new()
        {
            ReportedSalary = Person.ReportedSalary,
            Gender = Person.Gender,
            DateOfBirth = Person.DateOfBirth ?? DateTime.MinValue,
            PartTimeDegree = 1
        };

        BvgRevisionCalculator.Calculate(calculationYear, Person.BvgRetirementCapitalEndOfYear, bvgPerson)
        .Match(
            Right: revisionResult =>
            {
                RevisionCalculationResult = revisionResult;
                Logger.LogInformation($"Calculation Result: {JsonSerializer.Serialize(revisionResult)}");
            },
            Left: error =>
            {
                Logger.LogWarning($"Fehler: {error}");
                RevisionCalculationResult = null;
            });

        BvgCalculator.Calculate(calculationYear, Person.BvgRetirementCapitalEndOfYear, bvgPerson)
            .Match(
                Right: result =>
                {
                    CurrentCalculationResult = result;
                    Logger.LogInformation($"Calculation Result: {JsonSerializer.Serialize(result)}");
                },
                Left: error =>
                {
                    Logger.LogWarning($"Fehler: {error}");
                    CurrentCalculationResult = null;
                });
    }

    private TableResult[] ResultItems => 
    [
        new TableResult("Altersguthaben", Math.Round(CurrentCalculationResult?.FinalRetirementCapital ?? decimal.Zero), Math.Round(RevisionCalculationResult?.FinalRetirementCapital ?? decimal.Zero)),
    new TableResult("Altersrente", Math.Round(CurrentCalculationResult?.RetirementPension ?? decimal.Zero), Math.Round(RevisionCalculationResult?.RetirementPension ?? decimal.Zero)),
    ];

    private bool IsPersonNotValid()
    {
        return !(Person.Gender is not Gender.Undefined &&
               Person.DateOfBirth is not null);
    }
}
