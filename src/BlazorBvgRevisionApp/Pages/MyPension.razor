@page "/MeineVorsorge"

@using System.Text.Json
@using Application.Bvg
@using BlazorBvgRevisionApp.MyComponents.Models
@using BlazorBvgRevisionApp.Services
@using BlazorBvgRevisionApp.Services.Models
@using Domain.Enums
@using Domain.Models.Bvg
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting

@inject IWebAssemblyHostEnvironment EnvironmentService
@inject BvgRevisionCalculator BvgRevisionCalculator
@inject BvgCalculator BvgCalculator
@inject IPensionSupplementCalculator BvgPensionSupplementCalculator
@inject PensionPlanSimulator PlanSimulator
@inject ILogger<MyPension> Logger

<PageTitle>Meine Vorsorge</PageTitle>

<MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
    <MudText Class="mb-4" Typo="Typo.h4">BVG Leistungen vor und nach der Reform</MudText>
    
    <MudText Class="mb-4" Typo="Typo.h6">Schritt 1: Notwendige persönliche Angaben</MudText>

    <MudText Class="mb-4">
        Die Höhe Deines angesparten Guthabens und der daraus resultierenden Rente wird durch verschiedene Faktoren bestimmt.
        Zum Vergleich mit der BVG Reform 21 ist es zudem notwendig, das reglementarische Altersguthaben zum Rentenbeginn zu berücksichtigen,
        denn davon hängt die Höhe des Rentenzuschlags ab.
    </MudText>

    <MudText Class="mb-4">
        Alle diese Werte sind auf Ihrem Vorsorgeausweis, den Sie mindestens einmal jährlich erhalten, aufgeführt.
    </MudText>
    
    <MudForm Model="@Person" @ref="bvgForm" @bind-IsValid="@success">
        <BvgPersonForm Person="@Person"/>
        
        <MudText Class="mt-8" Typo="Typo.h6">Schritt 2: Haben Sie Anspruch auf einen Rentenzuschlag?</MudText>

        <MudText Class="mt-4">
            Falls Sie die beiden Vorraussetzungen für einen Rentenzuschlag erfüllen und Sie einer Übergangsgeneration angehören,
            erhöht sich BVG Altersrente. Details dazu finden Sie <MudLink Target="_blank" Href="https://www.bsv.admin.ch/bsv/de/home/sozialversicherungen/bv/reformen-und-revisionen.html">hier</MudLink>.
        </MudText>

        <EligibleForPension PreCondition="@PreCondition"/>

        <MudGrid>
            <MudItem md="12">
                <MudButton OnClick="OnBvgCalculate" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)">Berechne</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>

    @if(RevisionCalculationResult is not null)
    {
        <MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
            <MudText Class="mb-4" Typo="Typo.h5">BVG Berechnungsergebnis</MudText>
            <MudText Typo="Typo.body2">Das Ergebnis der Berechnung zeigt Ihre voraussichtlichen BVG-Altersleistungen. Die Leistungen sind auf Ihren ordentlichen Rentenbeginn gerechnet.</MudText>

            <MudText Typo="Typo.body1" Class="mt-4">Ihr Pensionierungsdatum: @RevisionCalculationResult.DateOfRetirement.ToString("d. MMMM, yyyy")</MudText>

            <RetirementBenefitTable Benefits="@ResultItems()"/>
        </MudPaper>
    }

    <MudText Class="mt-8" Typo="Typo.h6">Schritt 3 (Experimentell): Was ändert sich tatsächlich?</MudText>
    
    <PensionPlanForm PensionPlan="@PensionPlan"></PensionPlanForm>
    
    <MudGrid>
        <MudItem md="12">
            <MudButton OnClick="OnSimulatePlan" Variant="Variant.Filled" Color="Color.Secondary" Disabled="@(!ValidPersonDateOfBirth())">Prüfe Plan</MudButton>
        </MudItem>
    </MudGrid>
    
    @if (PlanSimulationResult is not null)
    {
        <MudPaper Class="mb-4 pa-6 align-center" Elevation="0">
            <MudText Class="mb-4" Typo="Typo.h5">Ihr Vorsorgeplan: </MudText>
            <MudText Typo="Typo.body2">Das Ergebnis der Berechnung zeigt die voraussichtlichen Altersleistungen gemäss Ihres Vorsorgeplanes.
                Die Leistungen sind auf Ihren ordentlichen Rentenbeginn gerechnet.</MudText>

            <MudText Typo="Typo.body1" Class="mt-4">Ihr Pensionierungsdatum: @RevisionCalculationResult?.DateOfRetirement.ToString("d. MMMM, yyyy")</MudText>

            <RetirementBenefitTable Benefits="@SimulationResultItems()" />
        </MudPaper>
    }
</MudPaper>

@code
{
    private BvgPersonViewModel Person { get; set; } = new ();
    private BvgCalculationResult? RevisionCalculationResult { get; set; }
    private BvgCalculationResult? SimulationRevisionCalculationResult;
    private BvgCalculationResult? CurrentCalculationResult { get; set; }
    private EligibleForPensionViewModel PreCondition { get; } = new();
    private PensionPlanViewModel PensionPlan = new();
    private PensionPlanSimulationResult? PlanSimulationResult;
    private MudForm? bvgForm;
    private bool success;

    protected override void OnInitialized()
    {
        if (EnvironmentService.IsDevelopment())
        {
            Person = GetTestPerson();
            PensionPlan = GetDefaultPensionPlan();
        }
    }

    private void OnBvgCalculate(MouseEventArgs _)
    {
        bvgForm?.Validate();

        if(!ValidPersonDateOfBirth())
        {
            return;
        }

        BvgPerson bvgPerson = new()
        {
            ReportedSalary = Person.ReportedSalary,
            Gender = Person.Gender,
            DateOfBirth = Person.DateOfBirth ?? DateTime.MinValue,
            PartTimeDegree = 1
        };

        BvgRevisionCalculator.Calculate(Person.ValidityYearCertificate, Person.BvgRetirementCapitalEndOfYear, bvgPerson)
        .Match(
            Right: revisionResult =>
            {
                RevisionCalculationResult = revisionResult;
                Logger.LogInformation($"Calculation Result: {JsonSerializer.Serialize(revisionResult)}");
            },
            Left: error =>
            {
                Logger.LogWarning($"Fehler: {error}");
                RevisionCalculationResult = null;
            });

        BvgCalculator.Calculate(Person.ValidityYearCertificate, Person.BvgRetirementCapitalEndOfYear, bvgPerson)
            .Match(
                Right: result =>
                {
                    CurrentCalculationResult = result;
                    Logger.LogInformation($"Calculation Result: {JsonSerializer.Serialize(result)}");
                },
                Left: error =>
                {
                    Logger.LogWarning($"Fehler: {error}");
                    CurrentCalculationResult = null;
                });
    }

    private void OnSimulatePlan(MouseEventArgs obj)
    {
        PlanSimulationResult = PlanSimulator.Calculate(PensionPlan, Person);
    }

    private TableResult[] ResultItems()
    {
        List<TableResult> results =
        [
            new TableResult("Altersguthaben", Math.Round(CurrentCalculationResult?.FinalRetirementCapital ?? decimal.Zero), Math.Round(RevisionCalculationResult?.FinalRetirementCapital ?? decimal.Zero)),
        ];

        if (RevisionCalculationResult is not null)
        {
            if (PreCondition.IsEligible())
            {
                decimal finalRetirementCapital = Math.Max(Person.FinalRetirementCapital, RevisionCalculationResult.FinalRetirementCapital);

                decimal pensionSupplement = BvgPensionSupplementCalculator.CalculatePensionSupplement(Person.DateOfBirth ?? DateTime.MaxValue, finalRetirementCapital);

                RevisionCalculationResult.RetirementPension += pensionSupplement;

                results.Add(
                    new TableResult("Altersrente",
                        Math.Round(CurrentCalculationResult?.RetirementPension ?? decimal.Zero),
                        Math.Round(RevisionCalculationResult?.RetirementPension ?? decimal.Zero)));

                results.Add(new TableResult("davon Rentenzuschlag", null, Math.Round(pensionSupplement), true));
            }
            else
            {
                results.Add(
                    new TableResult("Altersrente",
                        Math.Round(CurrentCalculationResult?.RetirementPension ?? decimal.Zero),
                        Math.Round(RevisionCalculationResult?.RetirementPension ?? decimal.Zero)));
            }
        }

        return results.ToArray();
    }

    private TableResult[] SimulationResultItems()
    {
        decimal? simulationRetirementCapital =
            PlanSimulationResult?.FinalRetirementCapital.HasValue ?? false ? Math.Round(PlanSimulationResult.FinalRetirementCapital.Value) : null;
        decimal? simulationRevisionRetirementCapital =
            SimulationRevisionCalculationResult?.FinalRetirementCapital is not null ? Math.Round(SimulationRevisionCalculationResult.FinalRetirementCapital) : null;

        decimal? simulationRetirementPension =
            PlanSimulationResult?.RetirementPension.HasValue ?? false ? Math.Round(PlanSimulationResult.RetirementPension.Value) : null;
        decimal? simulationRevisionRetirementPension =
            SimulationRevisionCalculationResult?.RetirementPension is not null ? Math.Round(SimulationRevisionCalculationResult.RetirementPension) : null;

        List<TableResult> results =
        [
            new TableResult("Altersguthaben", simulationRetirementCapital, simulationRevisionRetirementCapital),
            new TableResult("Altersrente", simulationRetirementPension, simulationRevisionRetirementPension)
        ];

        if (PreCondition.IsEligible() && SimulationRevisionCalculationResult is not null)
        {
            decimal finalRetirementCapital = Math.Max(Person.FinalRetirementCapital, SimulationRevisionCalculationResult?.FinalRetirementCapital ?? decimal.Zero);

            decimal pensionSupplement = BvgPensionSupplementCalculator.CalculatePensionSupplement(Person.DateOfBirth ?? DateTime.MaxValue, finalRetirementCapital);

            if (SimulationRevisionCalculationResult is not null)
            {
                SimulationRevisionCalculationResult.RetirementPension += pensionSupplement;
            }

            results.Add(new TableResult("davon Rentenzuschlag", null, Math.Round(pensionSupplement), true));
        }

        return results.ToArray();
    }

    private bool ValidPersonDateOfBirth()
    {
        return Person.DateOfBirth is not null;
    }

    private BvgPersonViewModel GetTestPerson()
    {
        return new BvgPersonViewModel
            {
                Name = "Bubu Vorsorger",
                ValidityYearCertificate = 2023,
                DateOfBirth = new DateTime(1969, 3, 17),
                ReportedSalary = 192967,
                BvgRetirementCapitalEndOfYear = 169805M,
                FinalRetirementCapital = 1171484,
                Gender = Gender.Male,
            };
    }

    private PensionPlanViewModel GetDefaultPensionPlan()
    {
        return new PensionPlanViewModel
        {
            ProjectionInterestRate = 0.015M,
            ConversionRate = 0.068M,
            RetirementCredits = [
                new RetirementCreditRange{FromAge = 0, ToAge = 24, Rate = 0M},
                new RetirementCreditRange{FromAge = 25, ToAge = 34, Rate = 0.07M},
                new RetirementCreditRange{FromAge = 35, ToAge = 44, Rate = 0.10M},
                new RetirementCreditRange{FromAge = 45, ToAge = 54, Rate = 0.15M},
                new RetirementCreditRange{FromAge = 55, ToAge = 65, Rate = 0.18M},
            ]
        };
    }

    private PensionPlanViewModel GetTestPensionPlan()
    {
        PensionPlanViewModel defaultPlan = GetDefaultPensionPlan();
        defaultPlan.InsuredSalary = 192967;
        defaultPlan.RetirementCapitalEndOfYear = 721065M;

        return defaultPlan;
    }
}
